<!-- Marketplace Page - Handlebars Template -->
<link rel="stylesheet" href="/assets/css/users/marketplace.css">

<!-- Hero Section - Full Width -->
<section class="hero-section">
  <div class="hero-content">
    <h1 class="hero-title">Discover Sustainable Fashion</h1>
    <p class="hero-subtitle">Shop pre-loved designer pieces and help save the planet, one outfit at a time.</p>
    
    <div class="search-container">
      <div class="d-flex align-items-center">
        <input type="text" class="search-input" placeholder="Search for brands, categories, or specific items..." id="searchInput">
        <button class="search-btn" onclick="searchProducts()">
          <i class="fas fa-search me-2"></i>Find Items
        </button>
      </div>
    </div>
  </div>
</section>

<!-- Main Content -->
<div class="container">
  <div class="filters-section shadow-sm p-4 mb-4" style="border-radius: 28px; background: #fff;">
    <div class="row justify-content-center mb-2">
      <div class="col-lg-12">
        <div class="d-flex flex-wrap gap-2 justify-content-center mb-3 filter-tabs">
          <button class="btn btn-light filter-tab active" onclick="filterCategory('all')">All Items</button>
          <button class="btn btn-light filter-tab" onclick="filterCategory('clothing')">Clothing</button>
          <button class="btn btn-light filter-tab" onclick="filterCategory('shoes')">Shoes</button>
          <button class="btn btn-light filter-tab" onclick="filterCategory('accessories')">Accessories</button>
          <button class="btn btn-light filter-tab" onclick="filterCategory('bags')">Bags</button>
          <button class="btn btn-light filter-tab" onclick="filterCategory('designer')">Designer Only</button>
          {{!-- <button class="btn btn-light filter-tab" onclick="filterCategory('sustainable')">High Eco Score</button> --}}
        </div>
        <div class="row align-items-center g-3">
          <div class="col-md-4">
            <select class="form-select" id="priceFilter" onchange="applyFilters()">
              <option value="">All Prices</option>
              <option value="0-25">$0 - $25</option>
              <option value="25-50">$25 - $50</option>
              <option value="50-100">$50 - $100</option>
              <option value="100+">$100+</option>
            </select>
          </div>
          <div class="col-md-4">
            <select class="form-select" id="conditionFilter" onchange="applyFilters()">
              <option value="">All Conditions</option>
              <option value="like-new">Like New</option>
              <option value="excellent">Excellent</option>
              <option value="good">Good</option>
              <option value="fair">Fair</option>
            </select>
          </div>
          <div class="col-md-4">
            <select class="form-select" id="sortBy" onchange="sortProducts()">
              <option value="newest">Newest First</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="products-grid" id="productGrid">
    {{#each listings}}
      <div class="product-card"
           data-category="{{category}}"
           data-price="{{price}}"
           data-condition="{{item_condition}}"
           onclick="window.location.href='/listing/{{listing_id}}'">

        <div class="product-image">
          {{#if image_url}}
            <img src="{{image_url}}" alt="{{title}}">
          {{else}}
            <img src="/assets/logo.png" alt="{{title}}">
          {{/if}}

          {{!-- {{#if eco_score}}
            <span class="product-badge">{{eco_score}}% Eco</span>
          {{/if}} --}}

          {{!-- Verified badge removed for now --}}
          
          <div class="click-hint">Click to view details</div>
        </div>

        <div class="product-info">
          <div class="product-category">{{category}}</div>

          <h3 class="product-title">{{title}}</h3>

          <!-- Replace this line of code to allow user to go to user profile page
          <div class="product-seller">by @{{username}}</div> -->
          <div class="product-seller">
            by <a href="/user/{{username}}" class="seller-link">@{{username}}</a>
          </div>

          <div class="product-details">
            <div class="product-price">${{price}}</div>
            <div class="product-condition {{conditionClass item_condition}}">
              {{capitalize item_condition}}
            </div>
          </div>

          <div class="product-actions">
            <button class="btn-buy" onclick="event.stopPropagation(); handleAddToCart({{listing_id}})">
              Add to Cart
            </button>
            <button class="btn-chat" title="Chat with seller" onclick="event.stopPropagation(); startConversationFromMarketplace('{{listing_id}}', '{{email}}', '{{title}}')">
              <i class="fas fa-comment"></i>
            </button>
          </div>

          <div class="product-date">Listed {{timeAgo created_at}}</div>
        </div>

      </div>
    {{/each}}
  </div>
</div>

<script>
// Marketplace search and filter logic

window.addEventListener('DOMContentLoaded', function() {
  window.allProducts = Array.from(document.querySelectorAll('.product-card'));
});

window.searchProducts = function() {
  const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
  const productCards = document.querySelectorAll('.product-card');
  let visibleCount = 0;

  productCards.forEach(card => {
    const title = card.querySelector('.product-title').textContent.toLowerCase();
    const seller = card.querySelector('.product-seller').textContent.toLowerCase();
    const category = card.querySelector('.product-category').textContent.toLowerCase();
    if (searchTerm === '' || title.includes(searchTerm) || seller.includes(searchTerm) || category.includes(searchTerm)) {
      card.style.display = 'block';
      visibleCount++;
    } else {
      card.style.display = 'none';
    }
  });
};

window.filterCategory = function(category) {
  document.querySelectorAll('.filter-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  event.target.classList.add('active');

  const productCards = document.querySelectorAll('.product-card');
  let visibleCount = 0;

  productCards.forEach(card => {
    let showCard = true;
    if (category === 'designer') {
      showCard = card.querySelector('.verified-badge') !== null;
    } else if (category === 'sustainable') {
      // You can add a data-sustainability attribute if needed
      showCard = false; // Implement as needed
    } else if (category !== 'all') {
      showCard = card.dataset.category === category;
    }
    if (showCard) {
      card.style.display = 'block';
      visibleCount++;
    } else {
      card.style.display = 'none';
    }
  });
  document.getElementById('priceFilter').value = '';
  document.getElementById('conditionFilter').value = '';
};

window.applyFilters = function() {
  const priceFilter = document.getElementById('priceFilter').value;
  const conditionFilter = document.getElementById('conditionFilter').value;
  const productCards = document.querySelectorAll('.product-card');
  let visibleCount = 0;

  productCards.forEach(card => {
    let showCard = true;
    if (priceFilter) {
      const productPrice = parseFloat(card.dataset.price);
      if (priceFilter === '100+' && productPrice < 100) {
        showCard = false;
      } else if (priceFilter !== '100+') {
        const [minPrice, maxPrice] = priceFilter.split('-').map(p => parseFloat(p));
        if (productPrice < minPrice || productPrice > maxPrice) {
          showCard = false;
        }
      }
    }
    if (conditionFilter && showCard) {
      const productCondition = card.dataset.condition;
      if (productCondition !== conditionFilter) {
        showCard = false;
      }
    }
    if (showCard) {
      card.style.display = 'block';
      visibleCount++;
    } else {
      card.style.display = 'none';
    }
  });
};

window.sortProducts = function() {
  const sortBy = document.getElementById('sortBy').value;
  const productGrid = document.getElementById('productGrid');
  const products = Array.from(productGrid.children);
  products.sort((a, b) => {
    switch (sortBy) {
      case 'price-low':
        return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
      case 'price-high':
        return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
      case 'newest':
      default:
        return 0;
    }
  });
  productGrid.innerHTML = '';
  products.forEach(product => productGrid.appendChild(product));
};

// Optional: search on Enter key
const searchInput = document.getElementById('searchInput');
if (searchInput) {
  searchInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      searchProducts();
    }
  });
  searchInput.addEventListener('input', function(e) {
    if (e.target.value.trim() === '') {
      searchProducts();
    }
  });
}

window.handleAddToCart = async function(listingId) {
  var isLoggedIn = {{#if user}}true{{else}}false{{/if}};
  if (!isLoggedIn) {
    window.location.href = '/login';
    return;
  }
  
  // Get the button that was clicked
  const button = event.target.closest('.btn-buy');
  const originalText = button.innerHTML;
  
  // Show loading state
  button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
  button.disabled = true;
  
  try {
    const response = await fetch('/api/cart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        listing_id: listingId,
        quantity: 1
      })
    });
    
    const data = await response.json();
    
    if (response.ok) {
      // Success - show success state briefly
      button.innerHTML = '<i class="fas fa-check"></i> Added!';
      button.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
      button.style.color = 'white';
      
      // Show success message
      showNotification(data.message || 'Item added to cart!', 'success');
      
      // Update cart badge
      if (window.updateCartBadge) {
        window.updateCartBadge();
      }
      
      // Reset button after 2 seconds
      setTimeout(() => {
        button.innerHTML = originalText;
        button.style.background = '';
        button.style.color = '';
        button.disabled = false;
      }, 2000);
      
    } else {
      // Error - show error state briefly
      button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Error';
      button.style.background = 'linear-gradient(135deg, #dc3545, #c82333)';
      button.style.color = 'white';
      
      // Show error message
      showNotification(data.error || 'Error adding item to cart', 'error');
      
      // Reset button after 3 seconds
      setTimeout(() => {
        button.innerHTML = originalText;
        button.style.background = '';
        button.style.color = '';
        button.disabled = false;
      }, 3000);
    }
  } catch (error) {
    console.error('Error adding to cart:', error);
    
    // Show error state
    button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Error';
    button.style.background = 'linear-gradient(135deg, #dc3545, #c82333)';
    button.style.color = 'white';
    
    showNotification('Error adding item to cart. Please try again.', 'error');
    
    // Reset button after 3 seconds
    setTimeout(() => {
      button.innerHTML = originalText;
      button.style.background = '';
      button.style.color = '';
      button.disabled = false;
    }, 3000);
  }
};

window.startConversationFromMarketplace = async function(listingId, sellerEmail, productTitle) {
  var isLoggedIn = {{#if user}}true{{else}}false{{/if}};
  if (!isLoggedIn) {
    window.location.href = '/login';
    return;
  }
  const message = prompt(`Send a message about "${productTitle}":`, "Hi, I'm interested in your product!");
  if (!message || message.trim() === '') return;
  try {
    const response = await fetch('/start-conversation', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        listing_id: listingId,
        message: message.trim()
      })
    });
    const data = await response.json();
    if (response.ok) {
      window.location.href = `/messages?conversation=${data.conversation_id}`;
    } else {
      alert('Error: ' + data.error);
    }
  } catch (error) {
    alert('Network error while contacting seller');
  }
};

// Notification system
function showNotification(message, type = 'success') {
  // Create notification element if it doesn't exist
  let notification = document.getElementById('notification');
  if (!notification) {
    notification = document.createElement('div');
    notification.id = 'notification';
    notification.className = 'notification';
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      z-index: 9999;
      transform: translateX(400px);
      transition: transform 0.3s ease;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
      max-width: 300px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
    `;
    document.body.appendChild(notification);
  }
  
  // Set notification color based on type
  if (type === 'error') {
    notification.style.background = 'linear-gradient(135deg, #dc3545, #c82333)';
  } else {
    notification.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
  }
  
  // Create notification content with close button
  notification.innerHTML = `
    <span>${message}</span>
    <button onclick="hideNotification()" style="
      background: none;
      border: none;
      color: white;
      font-size: 18px;
      cursor: pointer;
      padding: 0;
      margin-left: 10px;
      opacity: 0.8;
      transition: opacity 0.2s;
    ">&times;</button>
  `;
  notification.style.transform = 'translateX(0)';
  
  // Auto hide after 4 seconds
  setTimeout(() => {
    hideNotification();
  }, 4000);
}

function hideNotification() {
  const notification = document.getElementById('notification');
  if (notification) {
    notification.style.transform = 'translateX(400px)';
  }
}
</script>

