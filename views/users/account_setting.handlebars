{{!< user}}
<link rel="stylesheet" href="/assets/css/users/account_setting.css">

<section class="hero-section">
  <div class="hero-content">
    <h1 class="hero-title">Account Settings</h1>
    <p class="hero-subtitle">Manage your profile, password, and preferences</p>
  </div>
</section>

<div class="container mt-4">
  <div class="row">
    <!-- Profile Sidebar -->
    <div class="col-lg-3">
      <div class="account-container">
        <div class="profile-section text-center">
          <div id="profileImageContainer" class="profile-image-container mb-3">
            <img id="profileImagePreview" src="/assets/Profile.webp" alt="Profile Picture" class="profile-picture">
            <div id="profilePlaceholder" class="profile-placeholder" style="display: none;">
              <i class="fas fa-user"></i>
            </div>
          </div>
          <form id="profileImageForm" enctype="multipart/form-data">
            <input type="file" name="profile_image" id="profileImageInput" accept="image/*" class="form-control mb-2">
            <input type="hidden" name="current_profile_image_url" id="currentProfileImageUrl">
            <button type="submit" class="btn btn-save w-100">Change Profile Picture</button>
          </form>
        </div>
      </div>
    </div>

    <!-- Main Settings Area -->
    <div class="col-lg-9">
      <form id="personalInfoForm">
        <div class="account-container personal-info">
          <div class="settings-section">
            <h3 class="settings-title">Personal Information</h3>
            <div class="row">
              <div class="col-md-6 form-group">
                <label class="form-label">First Name</label>
                <input type="text" class="form-control" name="first_name" id="firstName" readonly>
              </div>
              <div class="col-md-6 form-group">
                <label class="form-label">Last Name</label>
                <input type="text" class="form-control" name="last_name" id="lastName" readonly>
              </div>
            </div>
            <div class="form-group">
              <label class="form-label">Username</label>
              <input type="text" class="form-control" name="username" id="userUsername" readonly>
            </div>
            <div class="form-group">
              <label class="form-label">Email Address</label>
              <input type="email" class="form-control" name="email" id="userEmail" readonly>
            </div>
            <div class="form-group">
              <label class="form-label">Phone Number</label>
              <input type="tel" class="form-control" name="phone_number" id="userPhone" readonly>
            </div>
            <div class="d-flex gap-2">
              <button type="button" id="editPersonalInfoBtn" class="btn btn-save">Edit Information</button>
              <button type="submit" id="savePersonalInfoBtn" class="btn btn-save" style="display: none;">Save Changes</button>
              <button type="button" id="cancelPersonalInfoBtn" class="btn btn-secondary" style="display: none;">Cancel</button>
            </div>
            <div id="personalInfoMsg" class="mt-2"></div>
          </div>
        </div>
      </form>

      <!-- Address Details Section -->
      <div class="account-container">
        <div class="settings-section">
          <h3 class="settings-title">Address Details</h3>
          <div id="addressList"></div>
                     <div class="d-flex gap-2 mt-2">
             <button type="button" id="addAddressBtn" class="btn btn-save">Add Address</button>
           </div>
          <div id="addressMsg" class="mt-2"></div>
        </div>
      </div>

      <!-- Address Modal -->
      <div class="modal fade" id="addressModal" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addressModalLabel">Add New Address</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <form id="addressFormModal">
                <input type="hidden" id="addressIndex" name="addressIndex">
                <div class="mb-3">
                  <label class="form-label">Address Name</label>
                  <input type="text" class="form-control" id="modalName" placeholder="e.g., Home, Office">
                </div>
                <div class="mb-3">
                  <label class="form-label">Street Address</label>
                  <input type="text" class="form-control" id="modalStreet">
                </div>
                <div class="row mb-3">
                  <div class="col">
                    <label class="form-label">City</label>
                    <input type="text" class="form-control" id="modalCity">
                  </div>
                  <div class="col">
                    <label class="form-label">State</label>
                    <input type="text" class="form-control" id="modalState">
                  </div>
                  <div class="col">
                    <label class="form-label">ZIP Code</label>
                    <input type="text" class="form-control" id="modalPostalCode">
                  </div>
                </div>
                <div class="mb-3">
                  <label class="form-label">Country</label>
                  <input type="text" class="form-control" id="modalCountry">
                </div>
                <div class="mb-3">
                  <label class="form-label">Phone Number</label>
                  <input type="text" class="form-control" id="modalPhone">
                </div>
                <div class="mb-3 form-check">
                  <input type="checkbox" class="form-check-input" id="modalDefault">
                  <label class="form-check-label" for="modalDefault">Make this my default address</label>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-save" id="saveAddressModalBtn">Save Address</button>
            </div>
          </div>
        </div>
      </div>

      <div class="account-container password-section">
        <div class="settings-section">
          <h3 class="settings-title">Change Password</h3>
          <form id="passwordChangeForm">
            <div class="form-group">
              <label class="form-label">Current Password</label>
              <input type="password" class="form-control" name="current_password" required>
            </div>
            <div class="form-group">
              <label class="form-label">New Password</label>
              <input type="password" class="form-control" name="new_password" required>
            </div>
            <div class="form-group">
              <label class="form-label">Confirm New Password</label>
              <input type="password" class="form-control" name="confirm_password" required>
            </div>
            <button type="submit" class="btn btn-save">Update Password</button>
          </form>
          <div id="passwordChangeMsg" class="mt-2"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- (Load once) Bootstrap JS bundle -->


<script>
document.addEventListener('DOMContentLoaded', function () {
  // ------------------ Prefill personal info ------------------
  fetch('/account-settings/api')
    .then(res => {
      console.log('Response status:', res.status);
      return res.json();
    })
    .then(data => {
      console.log('Fetched user data:', data);
      if (!data) {
        console.log('No data received');
        return;
      }
      
      const setVal = (id, v) => {
        const el = document.getElementById(id);
        if (el) {
          el.value = v || '';
          console.log(`Setting ${id} to:`, v || '');
        } else {
          console.log(`Element with id ${id} not found`);
        }
      };
      
      setVal('firstName', data.first_name);
      setVal('lastName', data.last_name);
      setVal('userUsername', data.username);
      setVal('userEmail', data.email);
      setVal('userPhone', data.phone_number);

      const currentUrlEl = document.getElementById('currentProfileImageUrl');
      if (currentUrlEl) currentUrlEl.value = data.profile_image_url || '';
      
      // Handle profile image display
      const profileImg = document.getElementById('profileImagePreview');
      const profilePlaceholder = document.getElementById('profilePlaceholder');
      
      if (data.profile_image_url && data.profile_image_url !== '/assets/Profile.webp') {
        // Show actual profile image
        if (profileImg) {
          profileImg.src = data.profile_image_url;
          profileImg.style.display = 'block';
        }
        if (profilePlaceholder) {
          profilePlaceholder.style.display = 'none';
        }
      } else {
        // Show placeholder icon
        if (profileImg) {
          profileImg.style.display = 'none';
        }
        if (profilePlaceholder) {
          profilePlaceholder.style.display = 'flex';
        }
      }
    })
    .catch(error => {
      console.error('Error fetching user data:', error);
    });

  // ------------------ Profile image upload ------------------
  const profileImageForm = document.getElementById('profileImageForm');
  const profileImageInput = document.getElementById('profileImageInput');
  
  // Add file validation
  profileImageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      // Check file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('Image size must be less than 5MB');
        this.value = '';
        return;
      }
      
      // Check file type
      if (!file.type.startsWith('image/')) {
        alert('Please select a valid image file');
        this.value = '';
        return;
      }
      
      // Show preview immediately
      const reader = new FileReader();
      reader.onload = function(e) {
        const profileImg = document.getElementById('profileImagePreview');
        const profilePlaceholder = document.getElementById('profilePlaceholder');
        
        if (profileImg) {
          profileImg.src = e.target.result;
          profileImg.style.display = 'block';
        }
        if (profilePlaceholder) {
          profilePlaceholder.style.display = 'none';
        }
      };
      reader.readAsDataURL(file);
    }
  });
  
  profileImageForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const file = profileImageInput.files[0];
    if (!file) {
      alert('Please select an image to upload');
      return;
    }
    
    const formData = new FormData(profileImageForm);
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    // Show loading state
    submitBtn.textContent = 'Uploading...';
    submitBtn.disabled = true;
    
    fetch('/account-settings/api', { method: 'POST', body: formData })
      .then(res => res.json())
      .then(data => {
        if (data.success && data.profile_image_url) {
          const profileImg = document.getElementById('profileImagePreview');
          const profilePlaceholder = document.getElementById('profilePlaceholder');
          
          if (profileImg) {
            profileImg.src = data.profile_image_url;
            profileImg.style.display = 'block';
          }
          if (profilePlaceholder) {
            profilePlaceholder.style.display = 'none';
          }
          
          document.getElementById('currentProfileImageUrl').value = data.profile_image_url;
          
          // Update the profile picture in the navigation bar
          const navProfileImg = document.querySelector('#accountDropdown img');
          if (navProfileImg) {
            navProfileImg.src = data.profile_image_url;
            navProfileImg.onerror = function() {
              this.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(firstNameInput.value + ' ' + lastNameInput.value)}&background=random&size=32`;
            };
          }
          
          // Show success message
          const successMsg = document.createElement('div');
          successMsg.className = 'alert alert-success mt-2';
          successMsg.textContent = 'Profile image updated successfully!';
          profileImageForm.appendChild(successMsg);
          
          // Remove success message after 3 seconds
          setTimeout(() => {
            if (successMsg.parentNode) {
              successMsg.remove();
            }
          }, 3000);
          
          // Clear the file input
          profileImageInput.value = '';
        } else {
          alert('Failed to update profile image: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Upload error:', error);
        alert('Failed to upload profile image. Please try again.');
      })
      .finally(() => {
        // Reset button state
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
      });
  });

  // ------------------ Personal info update ------------------
  const personalInfoForm = document.getElementById('personalInfoForm');
  const editPersonalInfoBtn = document.getElementById('editPersonalInfoBtn');
  const savePersonalInfoBtn = document.getElementById('savePersonalInfoBtn');
  const cancelPersonalInfoBtn = document.getElementById('cancelPersonalInfoBtn');
  const firstNameInput = document.getElementById('firstName');
  const lastNameInput = document.getElementById('lastName');
  const userUsernameInput = document.getElementById('userUsername');
  const userEmailInput = document.getElementById('userEmail');
  const userPhoneInput = document.getElementById('userPhone');

  let isEditingPersonalInfo = false;
  let originalPersonalInfo = {};

  function togglePersonalInfoEditing() {
    isEditingPersonalInfo = !isEditingPersonalInfo;
    firstNameInput.readOnly = !isEditingPersonalInfo;
    lastNameInput.readOnly = !isEditingPersonalInfo;
    userUsernameInput.readOnly = !isEditingPersonalInfo;
    userEmailInput.readOnly = !isEditingPersonalInfo;
    userPhoneInput.readOnly = !isEditingPersonalInfo;

    if (isEditingPersonalInfo) {
      // Store original values when entering edit mode
      originalPersonalInfo = {
        firstName: firstNameInput.value,
        lastName: lastNameInput.value,
        username: userUsernameInput.value,
        email: userEmailInput.value,
        phone: userPhoneInput.value
      };
      editPersonalInfoBtn.style.display = 'none';
      savePersonalInfoBtn.style.display = '';
      cancelPersonalInfoBtn.style.display = '';
    } else {
      // Reset to original values when canceling
      firstNameInput.value = originalPersonalInfo.firstName || '';
      lastNameInput.value = originalPersonalInfo.lastName || '';
      userUsernameInput.value = originalPersonalInfo.username || '';
      userEmailInput.value = originalPersonalInfo.email || '';
      userPhoneInput.value = originalPersonalInfo.phone || '';
      editPersonalInfoBtn.style.display = '';
      savePersonalInfoBtn.style.display = 'none';
      cancelPersonalInfoBtn.style.display = 'none';
    }
  }

  editPersonalInfoBtn.addEventListener('click', togglePersonalInfoEditing);
  cancelPersonalInfoBtn.addEventListener('click', togglePersonalInfoEditing);

  personalInfoForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Check if any changes were made
    const currentValues = {
      firstName: firstNameInput.value.trim(),
      lastName: lastNameInput.value.trim(),
      username: userUsernameInput.value.trim(),
      email: userEmailInput.value.trim(),
      phone: userPhoneInput.value.trim()
    };

    const hasChanges = 
      currentValues.firstName !== (originalPersonalInfo.firstName || '') ||
      currentValues.lastName !== (originalPersonalInfo.lastName || '') ||
      currentValues.username !== (originalPersonalInfo.username || '') ||
      currentValues.email !== (originalPersonalInfo.email || '') ||
      currentValues.phone !== (originalPersonalInfo.phone || '');

    if (!hasChanges) {
      const msgDiv = document.getElementById('personalInfoMsg');
      msgDiv.textContent = 'No changes to save.';
      msgDiv.style.color = 'blue';
      togglePersonalInfoEditing(); // Exit edit mode
      return;
    }

    const formData = new FormData();
    
    // Only add non-empty values to prevent NULL errors
    if (currentValues.firstName) formData.append('first_name', currentValues.firstName);
    if (currentValues.lastName) formData.append('last_name', currentValues.lastName);
    if (currentValues.username) formData.append('username', currentValues.username);
    if (currentValues.email) formData.append('email', currentValues.email);
    if (currentValues.phone) formData.append('phone_number', currentValues.phone);
    
    const currentProfileImageUrl = document.getElementById('currentProfileImageUrl').value;
    if (currentProfileImageUrl) {
      formData.append('current_profile_image_url', currentProfileImageUrl);
    }
    
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    // Show loading state
    submitBtn.textContent = 'Saving...';
    submitBtn.disabled = true;
    
    fetch('/account-settings/api', { method: 'POST', body: formData })
      .then(res => res.json())
      .then(data => {
        const msgDiv = document.getElementById('personalInfoMsg');
        if (data.success) {
          msgDiv.textContent = 'Personal information updated successfully!';
          msgDiv.style.color = 'green';
          
          // Update the navigation bar with new name
          const navNameSpan = document.querySelector('#accountDropdown .d-none.d-md-inline');
          if (navNameSpan) {
            navNameSpan.textContent = `${currentValues.firstName} ${currentValues.lastName}`;
          }
          
          // Update the fallback initials in the navigation bar profile picture
          const navProfileImg = document.querySelector('#accountDropdown img');
          if (navProfileImg) {
            navProfileImg.onerror = function() {
              this.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(currentValues.firstName + ' ' + currentValues.lastName)}&background=random&size=32`;
            };
          }
          
          // Update original values to current values after successful save
          originalPersonalInfo = { ...currentValues };
          togglePersonalInfoEditing(); // Exit edit mode
        } else {
          msgDiv.textContent = data.error || 'Failed to update personal information.';
          msgDiv.style.color = 'red';
        }
      })
      .catch(error => {
        console.error('Update error:', error);
        const msgDiv = document.getElementById('personalInfoMsg');
        msgDiv.textContent = 'Failed to update personal information. Please try again.';
        msgDiv.style.color = 'red';
      })
      .finally(() => {
        // Reset button state
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
      });
  });

  // ------------------ Password change ------------------
  const passwordChangeForm = document.getElementById('passwordChangeForm');
  passwordChangeForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const formData = new FormData(passwordChangeForm);
    
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    // Show loading state
    submitBtn.textContent = 'Updating...';
    submitBtn.disabled = true;
    
    fetch('/account-settings/password', {
      method: 'POST',
      body: new URLSearchParams([...formData])
    })
    .then(res => res.json())
    .then(data => {
      const msgDiv = document.getElementById('passwordChangeMsg');
      if (data.success) {
        msgDiv.textContent = 'Password updated successfully!';
        msgDiv.style.color = 'green';
        passwordChangeForm.reset();
      } else {
        msgDiv.textContent = data.error || 'Failed to update password.';
        msgDiv.style.color = 'red';
      }
    })
    .catch(error => {
      console.error('Password update error:', error);
      const msgDiv = document.getElementById('passwordChangeMsg');
      msgDiv.textContent = 'Failed to update password. Please try again.';
      msgDiv.style.color = 'red';
    })
    .finally(() => {
      // Reset button state
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    });
  });

  // ------------------ Address Management ------------------
  let addresses = [];
  let defaultAddressIndex = 1;
  let addressModal = new bootstrap.Modal(document.getElementById('addressModal'));
  let originalAddresses = [];

  const addAddressBtn = document.getElementById('addAddressBtn');

  function renderAddresses() {
    const list = document.getElementById('addressList');
    list.innerHTML = '';
    addresses.forEach((addr, idx) => {
      if (!addr) return;
      const isDefault = (defaultAddressIndex === idx + 1);
      const card = document.createElement('div');
      card.className = `address-card${isDefault ? ' default' : ''}`;
      
      const actionButtons = `
        <div>
          ${addresses.filter(a => a).length > 1 ? `<input type="radio" name="defaultAddress" value="${idx + 1}" ${isDefault ? 'checked' : ''} title="Set as default">` : ''}
          <button type="button" class="btn btn-link btn-sm" onclick="editAddress(${idx})" title="Edit Address"><i class="fa fa-edit"></i></button>
          <button type="button" class="btn btn-link btn-sm text-danger" onclick="deleteAddress(${idx})" title="Delete Address"><i class="fa fa-trash"></i></button>
        </div>
      `;
      
      card.innerHTML = `
        <div class="d-flex justify-content-between align-items-center mb-2">
          <div>
            <strong>${addr.name || 'Address'}${isDefault ? '<span class="address-type">Default</span>' : ''}</strong>
          </div>
          ${actionButtons}
        </div>
        <div class="mt-2">
          <div>${addr.street || ''}</div>
          <div>${addr.city || ''}${addr.state ? ', ' + addr.state : ''}${addr.postal_code ? ' ' + addr.postal_code : ''}</div>
          <div>${addr.country || ''}</div>
          ${addr.phone ? `<div>Phone: ${addr.phone}</div>` : ''}
        </div>
      `;
      list.appendChild(card);
    });
    
    // Show/hide add button based on number of addresses
    addAddressBtn.style.display = addresses.filter(a => a).length < 3 ? '' : 'none';
  }

  function getAddressFields() {
    return {
      name: document.getElementById('modalName').value,
      street: document.getElementById('modalStreet').value,
      city: document.getElementById('modalCity').value,
      state: document.getElementById('modalState').value,
      country: document.getElementById('modalCountry').value,
      postal_code: document.getElementById('modalPostalCode').value,
      phone: document.getElementById('modalPhone').value,
      isDefault: document.getElementById('modalDefault').checked
    };
  }

  function openAddressModal(idx) {
    document.getElementById('addressIndex').value = idx;
    if (addresses[idx]) {
      document.getElementById('modalName').value = addresses[idx].name || '';
      document.getElementById('modalStreet').value = addresses[idx].street || '';
      document.getElementById('modalCity').value = addresses[idx].city || '';
      document.getElementById('modalState').value = addresses[idx].state || '';
      document.getElementById('modalCountry').value = addresses[idx].country || '';
      document.getElementById('modalPostalCode').value = addresses[idx].postal_code || '';
      document.getElementById('modalPhone').value = addresses[idx].phone || '';
      document.getElementById('modalDefault').checked = (defaultAddressIndex === idx + 1);
    } else {
      document.getElementById('addressFormModal').reset();
      document.getElementById('modalDefault').checked = false;
    }
    addressModal.show();
  }

  window.editAddress = function(idx) {
    openAddressModal(idx);
  };

  window.deleteAddress = function(idx) {
    if (confirm('Delete this address?')) {
      addresses[idx] = null;
      if (defaultAddressIndex === idx + 1) {
        const next = addresses.findIndex(a => a);
        defaultAddressIndex = next >= 0 ? next + 1 : 1;
      }
      renderAddresses();
      
      // Automatically save to database after deletion
      saveAddressesToDatabase();
    }
  };

  addAddressBtn.addEventListener('click', function(e) {
    e.preventDefault();
    
    let idx = addresses.findIndex(a => !a);
    if (idx === -1) idx = addresses.length;
    openAddressModal(idx);
  });

  document.getElementById('saveAddressModalBtn').addEventListener('click', function() {
    const idx = parseInt(document.getElementById('addressIndex').value, 10);
    const addr = getAddressFields();
    addresses[idx] = addr;
    if (addresses.filter(a => a).length === 1 || addr.isDefault) defaultAddressIndex = idx + 1;
    renderAddresses();
    addressModal.hide();
    
    // Automatically save to database
    saveAddressesToDatabase();
  });

  document.getElementById('addressList').addEventListener('change', function(e) {
    if (e.target.name === 'defaultAddress') {
      defaultAddressIndex = parseInt(e.target.value, 10);
    }
  });

  // Function to save addresses to database
  function saveAddressesToDatabase() {
    const data = new FormData();
    
    // Add personal info
    const firstName = document.getElementById('firstName').value.trim();
    const lastName = document.getElementById('lastName').value.trim();
    const userUsername = document.getElementById('userUsername').value.trim();
    const userEmail = document.getElementById('userEmail').value.trim();
    const userPhone = document.getElementById('userPhone').value.trim();
    
    if (firstName) data.append('first_name', firstName);
    if (lastName) data.append('last_name', lastName);
    if (userUsername) data.append('username', userUsername);
    if (userEmail) data.append('email', userEmail);
    if (userPhone) data.append('phone_number', userPhone);
    
    const currentProfileImageUrl = document.getElementById('currentProfileImageUrl').value;
    if (currentProfileImageUrl) {
      data.append('current_profile_image_url', currentProfileImageUrl);
    }

    // Add address data
    for (let i = 0; i < 3; i++) {
      const addr = addresses[i] || {};
      if (addr.name || addr.street || addr.city || addr.state || addr.country || addr.postal_code || addr.phone) {
        data.append(`address_name${i ? '_' + (i + 1) : ''}`, addr.name || '');
        data.append(`address_street${i ? '_' + (i + 1) : ''}`, addr.street || '');
        data.append(`address_city${i ? '_' + (i + 1) : ''}`, addr.city || '');
        data.append(`address_state${i ? '_' + (i + 1) : ''}`, addr.state || '');
        data.append(`address_country${i ? '_' + (i + 1) : ''}`, addr.country || '');
        data.append(`address_postal_code${i ? '_' + (i + 1) : ''}`, addr.postal_code || '');
        data.append(`address_phone${i ? '_' + (i + 1) : ''}`, addr.phone || '');
      }
    }
    data.append('default_address_index', defaultAddressIndex);

    // Show loading state on the modal save button
    const modalSaveBtn = document.getElementById('saveAddressModalBtn');
    const originalText = modalSaveBtn.textContent;
    modalSaveBtn.textContent = 'Saving...';
    modalSaveBtn.disabled = true;

    fetch('/account-settings/api', { method: 'POST', body: data })
      .then(res => res.json())
      .then(data => {
        const msgDiv = document.getElementById('addressMsg');
        if (data.success) {
          msgDiv.textContent = 'Address saved successfully!';
          msgDiv.style.color = 'green';
          // Update original addresses to current addresses after successful save
          originalAddresses = JSON.parse(JSON.stringify(addresses));
        } else {
          msgDiv.textContent = data.error || 'Failed to save address.';
          msgDiv.style.color = 'red';
        }
      })
      .catch(error => {
        console.error('Address save error:', error);
        const msgDiv = document.getElementById('addressMsg');
        msgDiv.textContent = 'Failed to save address. Please try again.';
        msgDiv.style.color = 'red';
      })
      .finally(() => {
        // Reset button state
        modalSaveBtn.textContent = originalText;
        modalSaveBtn.disabled = false;
      });
  }



  // Load addresses on page load
  fetch('/account-settings/api')
    .then(res => res.json())
    .then(data => {
      addresses = [
        (data.address_name || data.address_street || data.address_city || data.address_state || data.address_country || data.address_postal_code || data.address_phone) ? {
          name: data.address_name,
          street: data.address_street,
          city: data.address_city,
          state: data.address_state,
          country: data.address_country,
          postal_code: data.address_postal_code,
          phone: data.address_phone
        } : null,
        (data.address_name_2 || data.address_street_2 || data.address_city_2 || data.address_state_2 || data.address_country_2 || data.address_postal_code_2 || data.address_phone_2) ? {
          name: data.address_name_2,
          street: data.address_street_2,
          city: data.address_city_2,
          state: data.address_state_2,
          country: data.address_country_2,
          postal_code: data.address_postal_code_2,
          phone: data.address_phone_2
        } : null,
        (data.address_name_3 || data.address_street_3 || data.address_city_3 || data.address_state_3 || data.address_country_3 || data.address_postal_code_3 || data.address_phone_3) ? {
          name: data.address_name_3,
          street: data.address_street_3,
          city: data.address_city_3,
          state: data.address_state_3,
          country: data.address_country_3,
          postal_code: data.address_postal_code_3,
          phone: data.address_phone_3
        } : null
      ];
      defaultAddressIndex = data.default_address_index || 1;
      renderAddresses();
    });
});
</script>