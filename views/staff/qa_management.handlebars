{{!-- Complete Staff Q&A Management Template --}}
<div class="container mt-5 qa-management-container">
  <div style="height: 32px;"></div>
  <div class="header-bar">
    <h3 class="mb-0">Q&A Moderation</h3>
    <div class="search-container">
      <i class="fas fa-search search-icon"></i>
      <input type="text" id="qaSearch" placeholder="Search questions..." class="form-control">
    </div>
  </div>
  
  <!-- Filter Tabs -->
  <div class="mb-3">
    <ul class="nav nav-tabs" id="moderationTabs">
      <li class="nav-item">
        <a class="nav-link active" id="all-tab" data-bs-toggle="tab" href="#all-questions">All Questions</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="pending-tab" data-bs-toggle="tab" href="#pending-questions">
          Pending Verification <span class="badge bg-danger ms-1" id="pendingBadge">0</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="verified-tab" data-bs-toggle="tab" href="#verified-questions">Verified</a>
      </li>
    </ul>
  </div>
  
  <div class="card shadow-sm">
    <div class="card-body">
      <h5 class="card-title">All Questions</h5>
      {{#if error}}
        <div class="alert alert-danger">{{error}}</div>
      {{/if}}
      <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
          <thead class="table-light">
            <tr>
              <th style="width: 5%;">Status</th>
              <th style="width: 25%;">Question</th>
              <th style="width: 10%;">Category</th>
              <th style="width: 12%;">Asked By</th>
              <th style="width: 10%;">Asked At</th>
              <th style="width: 20%;">Answers</th>
              <th style="width: 8%;">Helpful Votes</th>
              <th style="width: 10%;">Actions</th>
            </tr>
          </thead>
          <tbody>
            {{#each questions}}
              <tr class="{{#unless (gt answers.length 0)}}table-warning{{/unless}} {{#unless is_verified}}table-info{{/unless}}" 
                  data-qa-id="{{qa_id}}" 
                  data-verified="{{is_verified}}">
                <td class="text-center">
                  {{#if is_verified}}
                    <span class="badge bg-success">
                      <i class="fas fa-check-circle"></i> Verified
                    </span>
                  {{else}}
                    <span class="badge bg-warning">
                      <i class="fas fa-clock"></i> Pending
                    </span>
                  {{/if}}
                </td>
                <td style="max-width: 300px; white-space: pre-line;">
                  <div class="question-content">
                    <strong>{{question_text}}</strong>
                    {{#if details}}
                      <div class="question-details mt-2 text-muted small">{{details}}</div>
                    {{/if}}
                    {{#unless is_verified}}
                      <div class="mt-2">
                        <small class="text-warning">
                          <i class="fas fa-exclamation-triangle"></i> 
                          This question is not visible to users yet
                        </small>
                      </div>
                    {{/unless}}
                  </div>
                </td>
                <td><span class="badge bg-secondary">{{category}}</span></td>
                <td>
                  <div class="user-info">
                    <strong>{{#if asker_username}}{{asker_username}}{{else}}Guest{{/if}}</strong>
                    <br><small class="text-muted">{{asker_email}}</small>
                  </div>
                </td>
                <td><small>{{formatDate asked_at}}</small></td>
                <td>
                  <div class="answers-column">
                    {{#if (gt answers.length 0)}}
                      <div class="answers-count mb-2">
                        <span class="badge bg-success">{{answers.length}} Answer{{#if (gt answers.length 1)}}s{{/if}}</span>
                      </div>
                      <div class="answers-list">
                        {{#each answers}}
                          <div class="answer-item mb-2 p-2 border rounded {{#if @first}}bg-light{{/if}}">
                            <div class="answer-header d-flex justify-content-between align-items-start mb-1">
                              <small class="text-primary fw-bold">
                                {{#if this.answerer_username}}@{{this.answerer_username}}{{else}}{{this.answerer_email}}{{/if}}
                              </small>
                              <small class="text-muted">{{formatDate this.answered_at}}</small>
                            </div>
                            <div class="answer-content small">
                              {{#if (gt this.answer_content.length 100)}}
                                <span class="answer-preview">{{substring this.answer_content 0 100}}...</span>
                                <span class="answer-full" style="display: none;">{{this.answer_content}}</span>
                                <a href="#" class="text-primary small toggle-answer" onclick="toggleAnswerView(this); return false;">Show More</a>
                              {{else}}
                                {{this.answer_content}}
                              {{/if}}
                            </div>
                          </div>
                        {{/each}}
                      </div>
                    {{else}}
                      <span class="text-danger">No Answers Yet</span>
                    {{/if}}
                  </div>
                </td>
                <td class="text-center">
                  <span class="badge bg-info">{{helpful_count}}</span>
                </td>
                                 <td>
                   <div class="btn-group-vertical btn-group-sm" role="group">
                     <button type="button" class="btn btn-outline-primary btn-sm mb-1" onclick="showAnswerModal({{qa_id}}, '{{question_text}}')">
                       <i class="fas fa-reply"></i><span>Answer</span>
                     </button>
                     {{#if is_verified}}
                       <button type="button" class="btn btn-outline-secondary btn-sm mb-1" disabled>
                         <i class="fas fa-check"></i><span>Verified</span>
                       </button>
                     {{else}}
                       <button type="button" class="btn btn-outline-success btn-sm mb-1" onclick="verifyQuestion({{qa_id}})">
                         <i class="fas fa-check"></i><span>Verify</span>
                       </button>
                     {{/if}}
                     <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteQuestion({{qa_id}})">
                       <i class="fas fa-trash"></i><span>Delete</span>
                     </button>
                   </div>
                 </td>
              </tr>
            {{else}}
              <tr><td colspan="8" class="text-center">No questions found.</td></tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Answer Modal -->
<div class="modal fade" id="answerModal" tabindex="-1" aria-labelledby="answerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="answerModalLabel">Answer Question</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label fw-bold">Question:</label>
          <div class="p-3 bg-light rounded" id="modalQuestionText"></div>
        </div>
        <div class="mb-3">
          <label for="answerTextarea" class="form-label fw-bold">Your Answer:</label>
          <textarea class="form-control" id="answerTextarea" rows="6" placeholder="Write your answer here..."></textarea>
        </div>
      </div>
             <div class="modal-footer">
         <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
           <span>Cancel</span>
         </button>
         <button type="button" class="btn btn-primary" onclick="submitAnswer()">
           <span>Submit Answer</span>
         </button>
       </div>
    </div>
  </div>
</div>



<script>
let currentQuestionId = null;

document.addEventListener('DOMContentLoaded', function() {
  console.log('Staff Q&A page loaded');
  updatePendingCount();
  
  // Tab filtering functionality
  const tabs = document.querySelectorAll('#moderationTabs a[data-bs-toggle="tab"]');
  tabs.forEach(tab => {
    tab.addEventListener('shown.bs.tab', function (e) {
      const target = e.target.getAttribute('href');
      filterQuestionsByStatus(target);
    });
  });
  
  // Search functionality with debouncing
  const searchInput = document.getElementById('qaSearch');
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value;
      
      // Clear previous timeout
      clearTimeout(searchTimeout);
      
      // Set new timeout for debouncing
      searchTimeout = setTimeout(() => {
        filterQuestionsBySearch(searchTerm);
      }, 300); // 300ms delay
    });
  }
});

function updatePendingCount() {
  fetch('/api/qa/pending-count')
    .then(response => response.json())
    .then(data => {
      const pendingCount = data.pending_count || 0;
      const pendingBadge = document.getElementById('pendingBadge');
      
      if (pendingBadge) {
        pendingBadge.textContent = pendingCount;
        
        if (pendingCount > 0) {
          pendingBadge.className = 'badge bg-danger ms-1';
        } else {
          pendingBadge.className = 'badge bg-secondary ms-1';
        }
      }
    })
    .catch(error => {
      console.error('Error fetching pending count:', error);
    });
}

async function filterQuestionsByStatus(activeTab) {
  try {
    // Show loading state
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Loading...</td></tr>';
    }
    
    // Build query parameters
    const params = new URLSearchParams();
    
    // Get current search term
    const searchInput = document.getElementById('qaSearch');
    if (searchInput && searchInput.value.trim() !== '') {
      params.append('search', searchInput.value.trim());
    }
    
    // Add status filter based on active tab
    if (activeTab === '#pending-questions') {
      params.append('status', 'pending');
    } else if (activeTab === '#verified-questions') {
      params.append('status', 'verified');
    }
    
    // Make API call
    const response = await fetch(`/api/staff/qa/search?${params.toString()}`);
    if (!response.ok) {
      throw new Error('Filter request failed');
    }
    
    const questions = await response.json();
    
    // Update the table with filtered results
    updateQuestionsTable(questions);
    
  } catch (error) {
    console.error('Error filtering questions:', error);
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Error loading filtered results</td></tr>';
    }
  }
}

async function filterQuestionsBySearch(searchTerm) {
  try {
    // Show loading state
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Searching...</td></tr>';
    }
    
    // Build query parameters
    const params = new URLSearchParams();
    if (searchTerm.trim() !== '') {
      params.append('search', searchTerm);
    }
    
    // Get current active tab for status filter
    const activeTab = document.querySelector('#moderationTabs .nav-link.active');
    if (activeTab) {
      const tabId = activeTab.getAttribute('href');
      if (tabId === '#pending-questions') {
        params.append('status', 'pending');
      } else if (tabId === '#verified-questions') {
        params.append('status', 'verified');
      }
    }
    
    // Make API call
    const response = await fetch(`/api/staff/qa/search?${params.toString()}`);
    if (!response.ok) {
      throw new Error('Search request failed');
    }
    
    const questions = await response.json();
    
    // Update the table with search results
    updateQuestionsTable(questions);
    
  } catch (error) {
    console.error('Error searching questions:', error);
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Error loading search results</td></tr>';
    }
  }
}

function updateQuestionsTable(questions) {
  const tbody = document.querySelector('tbody');
  if (!tbody) return;
  
  if (questions.length === 0) {
    tbody.innerHTML = '<tr><td colspan="8" class="text-center">No questions found.</td></tr>';
    return;
  }
  
  let tableHTML = '';
  
  questions.forEach(question => {
    const isVerified = question.is_verified == 1;
    const hasAnswers = question.answers && question.answers.length > 0;
    
    tableHTML += `
      <tr class="${!hasAnswers ? 'table-warning' : ''} ${!isVerified ? 'table-info' : ''}" 
          data-qa-id="${question.qa_id}" 
          data-verified="${isVerified ? '1' : '0'}">
        <td class="text-center">
          ${isVerified ? 
            '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Verified</span>' :
            '<span class="badge bg-warning"><i class="fas fa-clock"></i> Pending</span>'
          }
        </td>
        <td style="max-width: 300px; white-space: pre-line;">
          <div class="question-content">
            <strong>${escapeHtml(question.question_text)}</strong>
            ${question.details ? `<div class="question-details mt-2 text-muted small">${escapeHtml(question.details)}</div>` : ''}
            ${!isVerified ? `
              <div class="mt-2">
                <small class="text-warning">
                  <i class="fas fa-exclamation-triangle"></i> 
                  This question is not visible to users yet
                </small>
              </div>
            ` : ''}
          </div>
        </td>
        <td><span class="badge bg-secondary">${escapeHtml(question.category)}</span></td>
        <td>
          <div class="user-info">
            <strong>${question.asker_username || 'Guest'}</strong>
            <br><small class="text-muted">${escapeHtml(question.asker_email)}</small>
          </div>
        </td>
        <td><small>${formatDate(question.asked_at)}</small></td>
        <td>
          <div class="answers-column">
            ${hasAnswers ? `
              <div class="answers-count mb-2">
                <span class="badge bg-success">${question.answers.length} Answer${question.answers.length > 1 ? 's' : ''}</span>
              </div>
              <div class="answers-list">
                ${question.answers.map(answer => `
                  <div class="answer-item mb-2 p-2 border rounded ${answer === question.answers[0] ? 'bg-light' : ''}">
                    <div class="answer-header d-flex justify-content-between align-items-start mb-1">
                      <small class="text-primary fw-bold">
                        ${answer.answerer_username ? '@' + escapeHtml(answer.answerer_username) : escapeHtml(answer.answerer_email)}
                      </small>
                      <small class="text-muted">${formatDate(answer.answered_at)}</small>
                    </div>
                    <div class="answer-content small">
                      ${answer.answer_content.length > 100 ? 
                        `<span class="answer-preview">${escapeHtml(answer.answer_content.substring(0, 100))}...</span>
                         <span class="answer-full" style="display: none;">${escapeHtml(answer.answer_content)}</span>
                         <a href="#" class="text-primary small toggle-answer" onclick="toggleAnswerView(this); return false;">Show More</a>` :
                        escapeHtml(answer.answer_content)
                      }
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : '<span class="text-danger">No Answers Yet</span>'}
          </div>
        </td>
        <td class="text-center">
          <span class="badge bg-info">${question.helpful_count || 0}</span>
        </td>
        <td>
          <div class="btn-group-vertical btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-primary btn-sm mb-1" onclick="showAnswerModal(${question.qa_id}, '${escapeHtml(question.question_text)}')">
              <i class="fas fa-reply"></i><span>Answer</span>
            </button>
            ${isVerified ? 
              `<button type="button" class="btn btn-outline-secondary btn-sm mb-1" disabled>
                <i class="fas fa-check"></i><span>Verified</span>
              </button>` :
              `<button type="button" class="btn btn-outline-success btn-sm mb-1" onclick="verifyQuestion(${question.qa_id})">
                <i class="fas fa-check"></i><span>Verify</span>
              </button>`
            }
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteQuestion(${question.qa_id})">
              <i class="fas fa-trash"></i><span>Delete</span>
            </button>
          </div>
        </td>
      </tr>
    `;
  });
  
  tbody.innerHTML = tableHTML;
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function toggleAnswerView(link) {
  const answerItem = link.closest('.answer-item');
  const preview = answerItem.querySelector('.answer-preview');
  const full = answerItem.querySelector('.answer-full');
  
  if (preview && full) {
    if (preview.style.display === 'none') {
      preview.style.display = 'inline';
      full.style.display = 'none';
      link.textContent = 'Show More';
    } else {
      preview.style.display = 'none';
      full.style.display = 'inline';
      link.textContent = 'Show Less';
    }
  }
}

function showAnswerModal(qaId, questionText) {
  currentQuestionId = qaId;
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = questionText;
  document.getElementById('modalQuestionText').textContent = tempDiv.textContent || tempDiv.innerText || "";
  document.getElementById('answerTextarea').value = '';
  
  const modal = new bootstrap.Modal(document.getElementById('answerModal'));
  modal.show();
}

async function submitAnswer() {
  if (!currentQuestionId) {
    alert('Error: Question ID not found');
    return;
  }
  
  const answerContent = document.getElementById('answerTextarea').value.trim();
  if (!answerContent) {
    alert('Please write an answer before submitting.');
    return;
  }
  
  const submitBtn = document.querySelector('#answerModal .btn-primary');
  const originalText = submitBtn.textContent;
  submitBtn.disabled = true;
  submitBtn.textContent = 'Submitting...';
  
  try {
    const response = await fetch(`/api/qa/${currentQuestionId}/answer`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        answer_content: answerContent
      })
    });
    
    if (response.ok) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('answerModal'));
      modal.hide();
      
      showNotification('Answer submitted successfully!', 'success');
      
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      const data = await response.json();
      alert('Failed to submit answer: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error submitting answer:', error);
    alert('Network error while submitting answer');
  } finally {
    submitBtn.disabled = false;
    submitBtn.textContent = originalText;
  }
}

async function verifyQuestion(qaId) {
  if (!confirm('Are you sure you want to verify and publish this question?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/qa/${qaId}/verify`, {
      method: 'PATCH'
    });
    
    if (response.ok) {
      showNotification('Question verified and published successfully!', 'success');
      
      // Update the UI immediately
      const row = document.querySelector(`tr[data-qa-id="${qaId}"]`);
      if (row) {
        row.dataset.verified = '1';
        row.classList.remove('table-info');
        
        // Update status badge
        const statusCell = row.querySelector('td:first-child');
        statusCell.innerHTML = '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Verified</span>';
        
        // Update verify button
        const verifyBtn = row.querySelector('.btn-outline-success');
        if (verifyBtn) {
          verifyBtn.className = 'btn btn-outline-secondary btn-sm mb-1';
          verifyBtn.disabled = true;
          verifyBtn.innerHTML = '<i class="fas fa-check me-1"></i>Verified';
          verifyBtn.setAttribute('onclick', '');
        }
        
        // Remove warning message
        const warningMsg = row.querySelector('.text-warning');
        if (warningMsg && warningMsg.parentElement) {
          warningMsg.parentElement.remove();
        }
      }
      
      updatePendingCount();
    } else {
      const data = await response.json();
      alert('Failed to verify question: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error verifying question:', error);
    alert('Network error while verifying question');
  }
}

async function deleteQuestion(qaId) {
  if (!confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/qa/${qaId}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      showNotification('Question deleted successfully!', 'success');
      
      const row = document.querySelector(`tr[data-qa-id="${qaId}"]`);
      if (row) {
        row.remove();
      }
      
      updatePendingCount();
    } else {
      const data = await response.json();
      alert('Failed to delete question: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error deleting question:', error);
    alert('Network error while deleting question');
  }
}

function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    min-width: 300px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    border-radius: 8px;
    font-weight: 500;
  `;
  notification.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    if (notification.parentElement) {
      notification.classList.add('fade');
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 150);
    }
  }, 5000);
  
  const closeBtn = notification.querySelector('.btn-close');
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      notification.remove();
    });
  }
}
</script>