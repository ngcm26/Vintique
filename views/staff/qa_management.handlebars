{{!-- Staff Q&A Forum --}}
<link rel="stylesheet" href="/assets/css/users/messages.css">
<div class="container mt-5">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Q&A Moderation</h1>
    <a href="/staff/dashboard" class="btn btn-secondary">Back to Dashboard</a>
  </div>
  <div class="card shadow-sm">
    <div class="card-body">
      <h5 class="card-title">All Questions</h5>
      {{#if error}}
        <div class="alert alert-danger">{{error}}</div>
      {{/if}}
      <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
          <thead class="table-light">
            <tr>
              <th>Question</th>
              <th>Category</th>
              <th>Asked By</th>
              <th>Asked At</th>
              <th>Answer</th>
              <th>Answered By</th>
              <th>Answered At</th>
              <th>Helpful Votes</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {{#each questions}}
              <tr class="{{#unless answer_content}}table-warning{{/unless}}" data-qa-id="{{qa_id}}">
                <td style="max-width: 300px; white-space: pre-line;">{{question_text}}</td>
                <td>{{category}}</td>
                <td>{{asker_username}}<br><small>{{asker_email}}</small></td>
                <td>{{formatDate asked_at}}</td>
                <td style="max-width: 300px; white-space: pre-line;">{{#if answer_content}}{{answer_content}}{{else}}<span class="text-danger">Unanswered</span>{{/if}}</td>
                <td>{{answerer_username}}<br><small>{{answerer_email}}</small></td>
                <td>{{#if answered_at}}{{formatDate answered_at}}{{/if}}</td>
                <td>{{helpful_count}}</td>
                <td>{{#if is_verified}}<span class="badge bg-success">Verified</span>{{else}}<span class="badge bg-secondary">Pending</span>{{/if}}</td>
                <td>
                  <a href="#" class="btn btn-sm btn-outline-primary mb-1">Answer</a>
                  <a href="#" class="btn btn-sm btn-outline-success mb-1">Verify</a>
                  <a href="#" class="btn btn-sm btn-outline-danger mb-1">Delete</a>
                </td>
              </tr>
            {{else}}
              <tr><td colspan="10" class="text-center">No questions found.</td></tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Answer button
  document.querySelectorAll('.btn-outline-primary').forEach(btn => {
    btn.addEventListener('click', async function(e) {
      e.preventDefault();
      const row = btn.closest('tr');
      const qaId = row.getAttribute('data-qa-id') || row.dataset.qaId || row.querySelector('[data-qa-id]')?.dataset.qaId;
      const currentAnswer = row.querySelector('td:nth-child(5)').textContent.trim();
      const answer = prompt('Enter your answer:', currentAnswer === 'Unanswered' ? '' : currentAnswer);
      if (answer === null) return;
      if (answer.trim() === '') { alert('Answer cannot be empty.'); return; }
      btn.disabled = true;
      const res = await fetch(`/api/qa/${qaId}/answer`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ answer_content: answer })
      });
      btn.disabled = false;
      if (res.ok) {
        row.querySelector('td:nth-child(5)').innerHTML = answer;
        row.classList.remove('table-warning');
        alert('Answer submitted!');
      } else {
        alert('Failed to submit answer.');
      }
    });
  });

  // Verify button
  document.querySelectorAll('.btn-outline-success').forEach(btn => {
    btn.addEventListener('click', async function(e) {
      e.preventDefault();
      const row = btn.closest('tr');
      const qaId = row.getAttribute('data-qa-id') || row.dataset.qaId || row.querySelector('[data-qa-id]')?.dataset.qaId;
      btn.disabled = true;
      const res = await fetch(`/api/qa/${qaId}/verify`, { method: 'PATCH' });
      btn.disabled = false;
      if (res.ok) {
        row.querySelector('td:nth-child(9)').innerHTML = '<span class=\"badge bg-success\">Verified</span>';
        alert('Question verified!');
      } else {
        alert('Failed to verify question.');
      }
    });
  });

  // Delete button
  document.querySelectorAll('.btn-outline-danger').forEach(btn => {
    btn.addEventListener('click', async function(e) {
      e.preventDefault();
      const row = btn.closest('tr');
      const qaId = row.getAttribute('data-qa-id') || row.dataset.qaId || row.querySelector('[data-qa-id]')?.dataset.qaId;
      if (!confirm('Are you sure you want to delete this question?')) return;
      btn.disabled = true;
      const res = await fetch(`/api/qa/${qaId}`, { method: 'DELETE' });
      btn.disabled = false;
      if (res.ok) {
        row.remove();
        alert('Question deleted!');
      } else {
        alert('Failed to delete question.');
      }
    });
  });
});
</script> 