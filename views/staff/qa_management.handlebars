{{!-- Complete Staff Q&A Management Template with Dropdown Filter --}}
<div class="container mt-5 qa-management-container">
  <div style="height: 32px;"></div>
  <div class="header-bar">
    <h3 class="mb-0">Q&A Moderation</h3>
    <div class="search-container">
      <i class="fas fa-search search-icon"></i>
      <input type="text" id="qaSearch" placeholder="Search questions..." class="form-control">
    </div>
  </div>
  
  <!-- Filter Dropdown -->
  <div class="mb-3">
    <div class="dropdown">
      <button class="btn btn-outline-primary dropdown-toggle" type="button" id="statusFilterDropdown" onclick="toggleDropdown()">
        <span id="currentFilterText">All Questions</span>
        <i class="fas fa-chevron-down ms-2"></i>
      </button>
      <ul class="dropdown-menu" id="dropdownMenu">
        <li><a class="dropdown-item active" href="#" data-filter="all" onclick="selectFilter(this, 'all')">All Questions</a></li>
        <li><a class="dropdown-item" href="#" data-filter="pending" onclick="selectFilter(this, 'pending')">Pending Verification <span class="badge bg-danger ms-1" id="pendingBadgeDropdown">0</span></a></li>
        <li><a class="dropdown-item" href="#" data-filter="verified" onclick="selectFilter(this, 'verified')">Verified</a></li>
      </ul>
    </div>
  </div>
  
  <div class="card shadow-sm">
    <div class="card-body">
      <h5 class="card-title">All Questions</h5>
      {{#if error}}
        <div class="alert alert-danger">{{error}}</div>
      {{/if}}
      <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle">
          <thead class="table-light">
            <tr>
              <th style="width: 5%;">Status</th>
              <th style="width: 25%;">Question</th>
              <th style="width: 10%;">Category</th>
              <th style="width: 12%;">Asked By</th>
              <th style="width: 10%;">Asked At</th>
              <th style="width: 20%;">Answers</th>
              <th style="width: 8%;">Helpful Votes</th>
              <th style="width: 10%;">Actions</th>
            </tr>
          </thead>
          <tbody>
            {{#each questions}}
              <tr class="{{#unless (gt answers.length 0)}}table-warning{{/unless}} {{#unless is_verified}}table-info{{/unless}}" 
                  data-qa-id="{{qa_id}}" 
                  data-verified="{{is_verified}}">
                <td class="text-center">
                  {{#if is_verified}}
                    <span class="badge bg-success">
                      <i class="fas fa-check-circle"></i> Verified
                    </span>
                  {{else}}
                    <span class="badge bg-warning">
                      <i class="fas fa-clock"></i> Pending
                    </span>
                  {{/if}}
                </td>
                <td style="max-width: 300px; white-space: pre-line;">
                  <div class="question-content">
                    <strong>{{question_text}}</strong>
                    {{#if details}}
                      <div class="question-details mt-2 text-muted small">{{details}}</div>
                    {{/if}}
                    {{#unless is_verified}}
                      <div class="mt-2">
                        <small class="text-warning">
                          <i class="fas fa-exclamation-triangle"></i> 
                          This question is not visible to users yet
                        </small>
                      </div>
                    {{/unless}}
                  </div>
                </td>
                <td><span class="badge bg-secondary">{{category}}</span></td>
                <td>
                  <div class="user-info">
                    <strong>{{#if asker_username}}{{asker_username}}{{else}}Guest{{/if}}</strong>
                    <br><small class="text-muted">{{asker_email}}</small>
                  </div>
                </td>
                <td><small>{{formatDate asked_at}}</small></td>
                <td>
                  <div class="answers-column">
                    {{#if (gt answers.length 0)}}
                      <div class="answers-count mb-2">
                        <span class="badge bg-success">{{answers.length}} Answer{{#if (gt answers.length 1)}}s{{/if}}</span>
                      </div>
                      <div class="answers-list">
                        {{#each answers}}
                          <div class="answer-item mb-2 p-2 border rounded {{#if @first}}bg-light{{/if}}" data-answer-id="{{this.answer_id}}">
                            <div class="answer-header d-flex justify-content-between align-items-start mb-1">
                              <small class="text-primary fw-bold">
                                {{#if this.answerer_username}}@{{this.answerer_username}}{{else}}{{this.answerer_email}}{{/if}}
                              </small>
                              <div class="d-flex align-items-center gap-2">
                                <small class="text-muted">{{formatDate this.answered_at}}</small>
                                <button type="button" class="btn btn-outline-danger btn-xs delete-answer-btn" 
                                        onclick="deleteAnswer({{this.answer_id}}, {{../qa_id}})" 
                                        title="Delete this answer">
                                  <i class="fas fa-trash"></i>
                                </button>
                              </div>
                            </div>
                            <div class="answer-content small">
                              {{#if (gt this.answer_content.length 100)}}
                                <span class="answer-preview">{{substring this.answer_content 0 100}}...</span>
                                <span class="answer-full" style="display: none;">{{this.answer_content}}</span>
                                <a href="#" class="text-primary small toggle-answer" onclick="toggleAnswerView(this); return false;">Show More</a>
                              {{else}}
                                {{this.answer_content}}
                              {{/if}}
                            </div>
                          </div>
                        {{/each}}
                      </div>
                    {{else}}
                      <span class="text-danger">No Answers Yet</span>
                    {{/if}}
                  </div>
                </td>
                <td class="text-center">
                  <span class="badge bg-info">{{helpful_count}}</span>
                </td>
                <td>
                  <div class="btn-group-vertical btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary btn-sm mb-1" onclick="showAnswerModal({{qa_id}}, '{{question_text}}')">
                      <i class="fas fa-reply"></i><span>Answer</span>
                    </button>
                    {{#if is_verified}}
                      <button type="button" class="btn btn-outline-secondary btn-sm mb-1" disabled>
                        <i class="fas fa-check"></i><span>Verified</span>
                      </button>
                    {{else}}
                      <button type="button" class="btn btn-outline-success btn-sm mb-1" onclick="verifyQuestion({{qa_id}})">
                        <i class="fas fa-check"></i><span>Verify</span>
                      </button>
                    {{/if}}
                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteQuestion({{qa_id}})">
                      <i class="fas fa-trash"></i><span>Delete</span>
                    </button>
                  </div>
                </td>
              </tr>
            {{else}}
              <tr><td colspan="8" class="text-center">No questions found.</td></tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Answer Modal -->
<div class="modal fade" id="answerModal" tabindex="-1" aria-labelledby="answerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="answerModalLabel">Answer Question</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label fw-bold">Question:</label>
          <div class="p-3 bg-light rounded" id="modalQuestionText"></div>
        </div>
        <div class="mb-3">
          <label for="answerTextarea" class="form-label fw-bold">Your Answer:</label>
          <textarea class="form-control" id="answerTextarea" rows="6" placeholder="Write your answer here..."></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <span>Cancel</span>
        </button>
        <button type="button" class="btn btn-primary" onclick="submitAnswer()">
          <span>Submit Answer</span>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* Main font for the entire page */
* {
  font-family: 'DM Sans', sans-serif;
}

/* Question details styling */
.question-details {
  padding: 0.5rem;
  background-color: #f8f9fa;
  border-radius: 4px;
  border-left: 3px solid #dee2e6;
}

/* Answers column styling */
.answers-column {
  max-height: 300px;
  overflow-y: auto;
}

/* Answer item styling */
.answer-item {
  background: #f8f9fa;
  border: 1px solid #dee2e6 !important;
}

.answer-item.bg-light {
  background: #e3f2fd !important;
  border-color: #2196f3 !important;
}

/* Answers count styling */
.answers-count {
  text-align: center;
}

/* User info styling */
.user-info {
  min-width: 120px;
}

/* Button group styling */
.btn-group-vertical .btn {
  margin-bottom: 2px;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  min-height: 32px;
  padding: 0.375rem 0.75rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.btn-group-vertical .btn i {
  margin-right: 0.25rem;
  flex-shrink: 0;
}

.btn-group-vertical .btn span {
  flex: 1;
  text-align: center;
}

/* Individual button styling */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: 0.375rem;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.btn i {
  margin-right: 0.25rem;
  flex-shrink: 0;
}

.btn span {
  flex: 1;
  text-align: center;
}

/* Toggle answer link styling */
.toggle-answer {
  cursor: pointer;
  text-decoration: none;
}

.toggle-answer:hover {
  text-decoration: underline;
}

/* Table styling */
.table td {
  vertical-align: top;
  padding: 0.75rem 0.5rem;
}

/* Answers list styling */
.answers-list {
  max-height: 200px;
  overflow-y: auto;
}

/* Highlight unverified questions */
.table-info {
  background-color: rgba(13, 202, 240, 0.1) !important;
}

/* Page specific styling for Q&A Management */
.qa-management-container {
  font-family: 'DM Sans', sans-serif;
}

.qa-management-container h1 {
  color: #1a1a1a;
  font-weight: 600;
  margin-bottom: 2rem;
  font-size: 2rem;
}

.header-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  padding: 0;
  background: none;
  border: none;
  margin-top: 32px;
}

.search-container {
  position: relative;
}

#qaSearch {
  background-color: white;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
  padding: 10px 16px 10px 40px;
  font-size: 14px;
  width: 280px;
  outline: none;
  transition: all 0.2s ease;
  color: #495057;
}

#qaSearch:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.search-icon {
  position: absolute;
  left: 14px;
  top: 50%;
  transform: translateY(-50%);
  color: #6c757d;
  font-size: 14px;
  pointer-events: none;
}

.qa-management-container .card {
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.qa-management-container .table {
  font-size: 0.9rem;
}

.qa-management-container .badge {
  font-weight: 500;
}

.qa-management-container .btn {
  font-weight: 500;
  border-radius: 6px;
  min-width: 80px;
  height: auto;
  line-height: 1.2;
}

.qa-management-container .btn-sm {
  min-width: 70px;
  font-size: 0.8rem;
  padding: 0.25rem 0.5rem;
}

.qa-management-container .btn-group-vertical {
  width: 100%;
}

.qa-management-container .btn-group-vertical .btn {
  width: 100%;
  margin-bottom: 4px;
}

/* Modal styling */
#answerModal .modal-content {
  border-radius: 8px;
}

#answerModal .modal-header {
  background-color: #f8f9fa;
  border-bottom: 1px solid #dee2e6;
}

#answerModal .form-control {
  border-radius: 6px;
  border: 1px solid #ced4da;
}

#answerModal .form-control:focus {
  border-color: #2196f3;
  box-shadow: 0 0 0 0.2rem rgba(33, 150, 243, 0.25);
}

/* Notification styling */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  min-width: 300px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  border-radius: 8px;
  font-weight: 500;
}

/* Add styles for delete answer button */
.delete-answer-btn {
  padding: 2px 6px;
  font-size: 0.75rem;
  border-radius: 3px;
  min-width: auto;
  height: auto;
  line-height: 1;
}

.delete-answer-btn:hover {
  background-color: #dc3545;
  border-color: #dc3545;
  color: #fff;
}

.answer-header {
  position: relative;
}

.answer-item {
  position: relative;
  transition: all 0.3s ease;
}

.answer-item.removing {
  opacity: 0.5;
  transform: scale(0.95);
}

.dropdown {
  position: relative;
}
.dropdown-toggle {
  min-width: 200px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: white;
  border: 1px solid #e1e5e9;
  color: #495057;
  font-weight: 500;
  padding: 10px 16px;
  border-radius: 8px;
  font-size: 14px;
}

.dropdown-toggle:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.dropdown-menu {
  border-radius: 8px;
  border: 1px solid #e1e5e9;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  min-width: 200px;
  padding: 8px 0;
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 1000;
  background-color: white;
}

.dropdown-menu.show {
  display: block;
}

.dropdown-item {
  padding: 10px 16px;
  font-size: 14px;
  color: #495057;
  transition: all 0.2s ease;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dropdown-item:hover {
  background-color: #f8f9fa;
  color: #007bff;
}

.dropdown-item.active {
  background-color: #007bff;
  color: white;
}

.dropdown-item.active:hover {
  background-color: #0056b3;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  #qaSearch {
    width: 100%;
    margin-bottom: 1rem;
  }

  .header-bar {
    flex-direction: column;
    align-items: stretch;
  }

  .qa-management-container .table-responsive {
    font-size: 0.8rem;
  }
  
  .qa-management-container .btn-group-vertical {
    flex-direction: column;
  }
  
  .qa-management-container .btn-group-vertical .btn {
    margin-bottom: 4px;
  }

  .dropdown-toggle {
    width: 100%;
  }
}
</style>

<script>
let currentQuestionId = null;
let currentFilter = 'all';

// Add dropdown toggle function
function toggleDropdown() {
  const dropdownMenu = document.getElementById('dropdownMenu');
  const chevron = document.querySelector('#statusFilterDropdown i');
  
  if (dropdownMenu.classList.contains('show')) {
    dropdownMenu.classList.remove('show');
    chevron.classList.remove('fa-chevron-up');
    chevron.classList.add('fa-chevron-down');
  } else {
    dropdownMenu.classList.add('show');
    chevron.classList.remove('fa-chevron-down');
    chevron.classList.add('fa-chevron-up');
  }
}

// Add filter selection function
function selectFilter(element, filterValue) {
  // Prevent default link behavior
  event.preventDefault();
  
  // Remove active class from all items
  document.querySelectorAll('.dropdown-item').forEach(item => {
    item.classList.remove('active');
  });
  
  // Add active class to clicked item
  element.classList.add('active');
  
  // Update dropdown button text (remove numbers from badge)
  const filterText = element.textContent.replace(/\d+/g, '').trim();
  document.getElementById('currentFilterText').textContent = filterText;
  
  // Update current filter
  currentFilter = filterValue;
  
  console.log('Filter selected:', filterValue);
  
  // Filter questions based on selection
  filterQuestionsByStatus(filterValue);
  
  // Close dropdown
  const dropdownMenu = document.getElementById('dropdownMenu');
  const chevron = document.querySelector('#statusFilterDropdown i');
  dropdownMenu.classList.remove('show');
  chevron.classList.remove('fa-chevron-up');
  chevron.classList.add('fa-chevron-down');
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
  const dropdown = document.querySelector('.dropdown');
  const dropdownMenu = document.getElementById('dropdownMenu');
  const chevron = document.querySelector('#statusFilterDropdown i');
  
  if (dropdown && !dropdown.contains(event.target)) {
    dropdownMenu.classList.remove('show');
    chevron.classList.remove('fa-chevron-up');
    chevron.classList.add('fa-chevron-down');
  }
});

document.addEventListener('DOMContentLoaded', function() {
  console.log('Staff Q&A page loaded');
  updatePendingCount();
  
  // REMOVED: Old dropdown functionality - now handled by manual functions above
  
  // Search functionality with debouncing
  const searchInput = document.getElementById('qaSearch');
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value;
      
      // Clear previous timeout
      clearTimeout(searchTimeout);
      
      // Set new timeout for debouncing
      searchTimeout = setTimeout(() => {
        filterQuestionsBySearch(searchTerm);
      }, 300); // 300ms delay
    });
  }
});

function updatePendingCount() {
  fetch('/api/qa/pending-count')
    .then(response => response.json())
    .then(data => {
      const pendingCount = data.pending_count || 0;
      const pendingBadgeDropdown = document.getElementById('pendingBadgeDropdown');
      
      if (pendingBadgeDropdown) {
        pendingBadgeDropdown.textContent = pendingCount;
        
        if (pendingCount > 0) {
          pendingBadgeDropdown.className = 'badge bg-danger ms-1';
        } else {
          pendingBadgeDropdown.className = 'badge bg-secondary ms-1';
        }
      }
    })
    .catch(error => {
      console.error('Error fetching pending count:', error);
    });
}

// UPDATED: filterQuestionsByStatus function for dropdown
async function filterQuestionsByStatus(filterValue) {
  console.log('Filtering by status:', filterValue);
  
  try {
    // Show loading state
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Loading...</td></tr>';
    }
    
    // Build query parameters
    const params = new URLSearchParams();
    
    // Get current search term
    const searchInput = document.getElementById('qaSearch');
    if (searchInput && searchInput.value.trim() !== '') {
      params.append('search', searchInput.value.trim());
    }
    
    // Add status filter based on dropdown selection
    if (filterValue === 'pending') {
      params.append('status', 'pending');
      console.log('Filtering for pending questions');
    } else if (filterValue === 'verified') {
      params.append('status', 'verified');
      console.log('Filtering for verified questions');
    } else {
      console.log('Showing all questions');
    }
    
    // Make API call
    const url = `/api/staff/qa/search?${params.toString()}`;
    console.log('Making API call to:', url);
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Filter request failed: ${response.status} ${response.statusText}`);
    }
    
    const questions = await response.json();
    console.log('Received questions:', questions.length);
    
    // Update the table with filtered results
    updateQuestionsTable(questions);
    
  } catch (error) {
    console.error('Error filtering questions:', error);
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Error loading filtered results: ${error.message}</td></tr>`;
    }
  }
}

// UPDATED: Search function to work with current filter
async function filterQuestionsBySearch(searchTerm) {
  console.log('Searching for:', searchTerm);
  
  try {
    // Show loading state
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border spinner-border-sm" role="status"></div> Searching...</td></tr>';
    }
    
    // Build query parameters
    const params = new URLSearchParams();
    if (searchTerm.trim() !== '') {
      params.append('search', searchTerm);
    }
    
    // Add current filter status
    if (currentFilter === 'pending') {
      params.append('status', 'pending');
    } else if (currentFilter === 'verified') {
      params.append('status', 'verified');
    }
    
    // Make API call
    const url = `/api/staff/qa/search?${params.toString()}`;
    console.log('Search API call to:', url);
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Search request failed: ${response.status} ${response.statusText}`);
    }
    
    const questions = await response.json();
    console.log('Search results:', questions.length);
    
    // Update the table with search results
    updateQuestionsTable(questions);
    
  } catch (error) {
    console.error('Error searching questions:', error);
    const tbody = document.querySelector('tbody');
    if (tbody) {
      tbody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Error loading search results: ${error.message}</td></tr>`;
    }
  }
}

function updateQuestionsTable(questions) {
  const tbody = document.querySelector('tbody');
  if (!tbody) return;
  
  if (questions.length === 0) {
    tbody.innerHTML = '<tr><td colspan="8" class="text-center">No questions found.</td></tr>';
    return;
  }
  
  let tableHTML = '';
  
  questions.forEach(question => {
    const isVerified = question.is_verified == 1;
    const hasAnswers = question.answers && question.answers.length > 0;
    
    tableHTML += `
      <tr class="${!hasAnswers ? 'table-warning' : ''} ${!isVerified ? 'table-info' : ''}" 
          data-qa-id="${question.qa_id}" 
          data-verified="${isVerified ? '1' : '0'}">
        <td class="text-center">
          ${isVerified ? 
            '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Verified</span>' :
            '<span class="badge bg-warning"><i class="fas fa-clock"></i> Pending</span>'
          }
        </td>
        <td style="max-width: 300px; white-space: pre-line;">
          <div class="question-content">
            <strong>${escapeHtml(question.question_text)}</strong>
            ${question.details ? `<div class="question-details mt-2 text-muted small">${escapeHtml(question.details)}</div>` : ''}
            ${!isVerified ? `
              <div class="mt-2">
                <small class="text-warning">
                  <i class="fas fa-exclamation-triangle"></i> 
                  This question is not visible to users yet
                </small>
              </div>
            ` : ''}
          </div>
        </td>
        <td><span class="badge bg-secondary">${escapeHtml(question.category)}</span></td>
        <td>
          <div class="user-info">
            <strong>${question.asker_username || 'Guest'}</strong>
            <br><small class="text-muted">${escapeHtml(question.asker_email)}</small>
          </div>
        </td>
        <td><small>${formatDate(question.asked_at)}</small></td>
        <td>
          <div class="answers-column">
            ${hasAnswers ? `
              <div class="answers-count mb-2">
                <span class="badge bg-success">${question.answers.length} Answer${question.answers.length > 1 ? 's' : ''}</span>
              </div>
              <div class="answers-list">
                ${question.answers.map(answer => `
                  <div class="answer-item mb-2 p-2 border rounded ${answer === question.answers[0] ? 'bg-light' : ''}" data-answer-id="${answer.answer_id}">
                    <div class="answer-header d-flex justify-content-between align-items-start mb-1">
                      <small class="text-primary fw-bold">
                        ${answer.answerer_username ? '@' + escapeHtml(answer.answerer_username) : escapeHtml(answer.answerer_email)}
                      </small>
                      <div class="d-flex align-items-center gap-2">
                        <small class="text-muted">${formatDate(answer.answered_at)}</small>
                        <button type="button" class="btn btn-outline-danger btn-xs delete-answer-btn" 
                                onclick="deleteAnswer(${answer.answer_id}, ${question.qa_id})" 
                                title="Delete this answer">
                          <i class="fas fa-trash"></i>
                        </button>
                      </div>
                    </div>
                    <div class="answer-content small">
                      ${answer.answer_content.length > 100 ? 
                        `<span class="answer-preview">${escapeHtml(answer.answer_content.substring(0, 100))}...</span>
                         <span class="answer-full" style="display: none;">${escapeHtml(answer.answer_content)}</span>
                         <a href="#" class="text-primary small toggle-answer" onclick="toggleAnswerView(this); return false;">Show More</a>` :
                        escapeHtml(answer.answer_content)
                      }
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : '<span class="text-danger">No Answers Yet</span>'}
          </div>
        </td>
        <td class="text-center">
          <span class="badge bg-info">${question.helpful_count || 0}</span>
        </td>
        <td>
          <div class="btn-group-vertical btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-primary btn-sm mb-1" onclick="showAnswerModal(${question.qa_id}, '${escapeHtml(question.question_text)}')">
              <i class="fas fa-reply"></i><span>Answer</span>
            </button>
            ${isVerified ? 
              `<button type="button" class="btn btn-outline-secondary btn-sm mb-1" disabled>
                <i class="fas fa-check"></i><span>Verified</span>
              </button>` :
              `<button type="button" class="btn btn-outline-success btn-sm mb-1" onclick="verifyQuestion(${question.qa_id})">
                <i class="fas fa-check"></i><span>Verify</span>
              </button>`
            }
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteQuestion(${question.qa_id})">
              <i class="fas fa-trash"></i><span>Delete</span>
            </button>
          </div>
        </td>
      </tr>
    `;
  });
  
  tbody.innerHTML = tableHTML;
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function toggleAnswerView(link) {
  const answerItem = link.closest('.answer-item');
  const preview = answerItem.querySelector('.answer-preview');
  const full = answerItem.querySelector('.answer-full');
  
  if (preview && full) {
    if (preview.style.display === 'none') {
      preview.style.display = 'inline';
      full.style.display = 'none';
      link.textContent = 'Show More';
    } else {
      preview.style.display = 'none';
      full.style.display = 'inline';
      link.textContent = 'Show Less';
    }
  }
}

// NEW: Delete individual answer function
async function deleteAnswer(answerId, questionId) {
  if (!confirm('Are you sure you want to delete this answer? This action cannot be undone.')) {
    return;
  }
  
  console.log('Deleting answer:', answerId, 'from question:', questionId);
  
  // Find the answer element and add removing class for visual feedback
  const answerElement = document.querySelector(`[data-answer-id="${answerId}"]`);
  if (answerElement) {
    answerElement.classList.add('removing');
  }
  
  try {
    const response = await fetch(`/api/qa/answers/${answerId}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      // Remove the answer element from DOM
      if (answerElement) {
        answerElement.remove();
      }
      
      // Update answer count and status
      updateAnswerCountAfterDeletion(questionId);
      
      showNotification('Answer deleted successfully!', 'success');
      
      console.log(`Answer ${answerId} deleted successfully`);
    } else {
      const data = await response.json();
      console.error('Failed to delete answer:', data.error);
      
      // Remove removing class if deletion failed
      if (answerElement) {
        answerElement.classList.remove('removing');
      }
      
      alert('Failed to delete answer: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error deleting answer:', error);
    
    // Remove removing class if deletion failed
    if (answerElement) {
      answerElement.classList.remove('removing');
    }
    
    alert('Network error while deleting answer');
  }
}

// Helper function to update answer count after deletion
function updateAnswerCountAfterDeletion(questionId) {
  const questionRow = document.querySelector(`tr[data-qa-id="${questionId}"]`);
  if (!questionRow) return;
  
  const answersColumn = questionRow.querySelector('.answers-column');
  const remainingAnswers = answersColumn.querySelectorAll('.answer-item').length;
  
  const answersCountBadge = answersColumn.querySelector('.answers-count .badge');
  
  if (remainingAnswers === 0) {
    // No more answers - update the entire answers column
    answersColumn.innerHTML = '<span class="text-danger">No Answers Yet</span>';
    
    // Add table-warning class to highlight unanswered questions
    questionRow.classList.add('table-warning');
  } else {
    // Update the count badge
    if (answersCountBadge) {
      answersCountBadge.textContent = `${remainingAnswers} Answer${remainingAnswers > 1 ? 's' : ''}`;
    }
  }
}

// FIXED: Multiple fallback methods for the Answer button
function showAnswerModal(qaId, questionText) {
  console.log('showAnswerModal called with:', qaId, questionText);
  
  currentQuestionId = qaId;
  
  // Clean the question text and set it in the modal
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = questionText;
  const cleanText = tempDiv.textContent || tempDiv.innerText || "";
  
  document.getElementById('modalQuestionText').textContent = cleanText;
  document.getElementById('answerTextarea').value = '';
  
  const modalElement = document.getElementById('answerModal');
  
  // Method 1: Try Bootstrap 5
  if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
    console.log('Using Bootstrap 5 Modal');
    try {
      const modal = new bootstrap.Modal(modalElement);
      modal.show();
      return;
    } catch (error) {
      console.error('Bootstrap 5 failed:', error);
    }
  }
  
  // Method 2: Try jQuery Bootstrap
  if (typeof $ !== 'undefined' && $.fn.modal) {
    console.log('Using jQuery Bootstrap Modal');
    try {
      $(modalElement).modal('show');
      return;
    } catch (error) {
      console.error('jQuery Bootstrap failed:', error);
    }
  }
  
  // Method 3: Manual modal display (fallback)
  console.log('Using manual modal display');
  
  // Show modal manually
  modalElement.style.display = 'block';
  modalElement.classList.add('show');
  modalElement.setAttribute('aria-modal', 'true');
  modalElement.setAttribute('role', 'dialog');
  modalElement.removeAttribute('aria-hidden');
  
  // Add backdrop
  let backdrop = document.getElementById('manual-backdrop');
  if (!backdrop) {
    backdrop = document.createElement('div');
    backdrop.className = 'modal-backdrop fade show';
    backdrop.id = 'manual-backdrop';
    backdrop.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1040;
      width: 100vw;
      height: 100vh;
      background-color: #000;
      opacity: 0.5;
    `;
    document.body.appendChild(backdrop);
  }
  
  // Add modal-open class to body
  document.body.classList.add('modal-open');
  document.body.style.overflow = 'hidden';
  
  // Add close functionality
  const closeButtons = modalElement.querySelectorAll('[data-bs-dismiss="modal"], .btn-close');
  closeButtons.forEach(btn => {
    btn.onclick = function() {
      closeManualModal();
    };
  });
  
  // Close on backdrop click
  backdrop.onclick = function() {
    closeManualModal();
  };
  
  // Close on Escape key
  document.addEventListener('keydown', function escapeHandler(e) {
    if (e.key === 'Escape') {
      closeManualModal();
      document.removeEventListener('keydown', escapeHandler);
    }
  });
  
  // Focus on textarea
  setTimeout(() => {
    const textarea = document.getElementById('answerTextarea');
    if (textarea) {
      textarea.focus();
    }
  }, 100);
}

// Function to close manual modal
function closeManualModal() {
  const modalElement = document.getElementById('answerModal');
  const backdrop = document.getElementById('manual-backdrop');
  
  // Hide modal
  modalElement.style.display = 'none';
  modalElement.classList.remove('show');
  modalElement.setAttribute('aria-hidden', 'true');
  modalElement.removeAttribute('aria-modal');
  modalElement.removeAttribute('role');
  
  // Remove backdrop
  if (backdrop) {
    backdrop.remove();
  }
  
  // Remove modal-open class from body
  document.body.classList.remove('modal-open');
  document.body.style.overflow = '';
}

async function submitAnswer() {
  if (!currentQuestionId) {
    alert('Error: Question ID not found');
    return;
  }
  
  const answerContent = document.getElementById('answerTextarea').value.trim();
  if (!answerContent) {
    alert('Please write an answer before submitting.');
    return;
  }
  
  const submitBtn = document.querySelector('#answerModal .btn-primary');
  const originalText = submitBtn.textContent;
  submitBtn.disabled = true;
  submitBtn.textContent = 'Submitting...';
  
  try {
    const response = await fetch(`/api/qa/${currentQuestionId}/answer`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        answer_content: answerContent
      })
    });
    
    if (response.ok) {
      // Close modal using appropriate method
      if (typeof bootstrap !== 'undefined') {
        const modal = bootstrap.Modal.getInstance(document.getElementById('answerModal'));
        if (modal) modal.hide();
      } else if (typeof $ !== 'undefined') {
        $('#answerModal').modal('hide');
      } else {
        closeManualModal();
      }
      
      showNotification('Answer submitted successfully!', 'success');
      
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      const data = await response.json();
      alert('Failed to submit answer: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error submitting answer:', error);
    alert('Network error while submitting answer');
  } finally {
    submitBtn.disabled = false;
    submitBtn.textContent = originalText;
  }
}

async function verifyQuestion(qaId) {
  if (!confirm('Are you sure you want to verify and publish this question?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/qa/${qaId}/verify`, {
      method: 'PATCH'
    });
    
    if (response.ok) {
      showNotification('Question verified and published successfully!', 'success');
      
      // Update the UI immediately
      const row = document.querySelector(`tr[data-qa-id="${qaId}"]`);
      if (row) {
        row.dataset.verified = '1';
        row.classList.remove('table-info');
        
        // Update status badge
        const statusCell = row.querySelector('td:first-child');
        statusCell.innerHTML = '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Verified</span>';
        
        // Update verify button
        const verifyBtn = row.querySelector('.btn-outline-success');
        if (verifyBtn) {
          verifyBtn.className = 'btn btn-outline-secondary btn-sm mb-1';
          verifyBtn.disabled = true;
          verifyBtn.innerHTML = '<i class="fas fa-check me-1"></i>Verified';
          verifyBtn.setAttribute('onclick', '');
        }
        
        // Remove warning message
        const warningMsg = row.querySelector('.text-warning');
        if (warningMsg && warningMsg.parentElement) {
          warningMsg.parentElement.remove();
        }
      }
      
      updatePendingCount();
    } else {
      const data = await response.json();
      alert('Failed to verify question: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error verifying question:', error);
    alert('Network error while verifying question');
  }
}

async function deleteQuestion(qaId) {
  if (!confirm('Are you sure you want to delete this question? This action cannot be undone.')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/qa/${qaId}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      showNotification('Question deleted successfully!', 'success');
      
      const row = document.querySelector(`tr[data-qa-id="${qaId}"]`);
      if (row) {
        row.remove();
      }
      
      updatePendingCount();
    } else {
      const data = await response.json();
      alert('Failed to delete question: ' + (data.error || 'Unknown error'));
    }
  } catch (error) {
    console.error('Error deleting question:', error);
    alert('Network error while deleting question');
  }
}

function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show`;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    min-width: 300px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    border-radius: 8px;
    font-weight: 500;
  `;
  notification.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    if (notification.parentElement) {
      notification.classList.add('fade');
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 150);
    }
  }, 5000);
  
  const closeBtn = notification.querySelector('.btn-close');
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      notification.remove();
    });
  }
}
</script>