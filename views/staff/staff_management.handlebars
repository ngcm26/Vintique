<h1>Staff Management</h1>
<div style="height: 32px;"></div>
<div class="header-bar">
  <h3 class="mb-0">Staff Management</h3>
  <div style="display: flex; gap: 8px; align-items: center;">
    {{#if isAdmin}}
    <button class="btn-add-staff" data-bs-toggle="modal" data-bs-target="#addStaffModal">
      <i class="fas fa-plus"></i> Add Staff Member
    </button>
    {{/if}}
    <input type="text" class="form-control" id="staffSearch" style="width: 250px;" placeholder="Search staff...">
    <select id="statusFilter" class="form-control" style="width: 140px;">
      <option value="all">All Statuses</option>
      <option value="active">Active</option>
      <option value="suspended">Suspended</option>
    </select>
    <select id="roleFilter" class="form-control" style="width: 120px;">
      <option value="all">All Roles</option>
      <option value="admin">Admin</option>
      <option value="staff">Staff</option>
    </select>
  </div>
</div>
<div class="table-container">
<table class="table table-hover user-mgmt-table" id="staffTable">
  <thead>
    <tr>
      <th>Staff ID</th>
      <th>Email</th>
      <th>Phone</th>
      <th>Role</th>
      <th>Status</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    {{#each staffMembers}}
      <tr data-staff-id="{{this.user_id}}" {{#if (eq this.user_id ../currentUser.user_id)}}class="current-user-row"{{/if}}>
        <td>{{this.user_id}}</td>
        <td>{{this.email}}</td>
        <td>{{this.phone_number}}</td>
        <td>
          <span class="badge role-{{this.role}}">{{this.role}}</span>
        </td>
        <td>
          {{#if (eq this.status 'active')}}
            <span class="badge status-active">Active</span>
          {{else}}
            <span class="badge status-banned">Suspended</span>
          {{/if}}
        </td>
        <td class="actions-cell">
          {{#if (eq this.user_id ../currentUser.user_id)}}
            <!-- Current user - show disabled buttons -->
            <button class="btn btn-sm btn-secondary" disabled title="You cannot edit your own account">Edit</button>
            <button class="btn btn-sm btn-danger" disabled title="You cannot delete your own account">Delete</button>
            <span class="text-muted small">(Your account)</span>
          {{else}}
            <!-- Other staff members - show active buttons only for admins -->
            {{#if ../isAdmin}}
              {{#if (eq this.status 'active')}}
                <button class="btn btn-sm btn-warning action-btn" onclick="toggleStaffStatus(this)">Suspend</button>
              {{else}}
                <button class="btn btn-sm btn-success action-btn" onclick="toggleStaffStatus(this)">Unsuspend</button>
              {{/if}}
              <button class="btn btn-sm btn-secondary" onclick="editStaff(this)">Edit</button>
              <button class="btn btn-sm btn-danger" onclick="deleteStaff(this)">Delete</button>
            {{else}}
              <span class="text-muted small">(Admin only)</span>
            {{/if}}
          {{/if}}
        </td>
      </tr>
    {{/each}}
  </tbody>
</table>
</div>

<!-- Edit Staff Modal -->
<div class="modal fade" id="editStaffModal" tabindex="-1" aria-labelledby="editStaffModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editStaffModalLabel">Edit Staff Member</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label for="editStaffId" class="form-label">Staff ID</label>
            <input type="text" class="form-control" id="editStaffId" readonly>
          </div>
          <div class="mb-3">
            <label for="editStaffEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="editStaffEmail" required>
          </div>
          <div class="mb-3">
            <label for="editStaffPhone" class="form-label">Phone Number</label>
            <input type="tel" class="form-control" id="editStaffPhone" placeholder="12345678" required>
          </div>
          <div class="mb-3">
            <label for="editStaffRole" class="form-label">Role</label>
            <select class="form-control" id="editStaffRole" required>
              <option value="staff">Staff</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editStaffStatus" class="form-label">Status</label>
            <select class="form-control" id="editStaffStatus">
              <option value="active">Active</option>
              <option value="suspended">Suspended</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveStaffChanges()">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Add Staff Modal -->
<div class="modal fade" id="addStaffModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Staff Member</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addStaffForm">
          <div class="mb-3">
            <label for="staffEmail" class="form-label">Email Address</label>
            <input type="email" class="form-control" id="staffEmail" required>
          </div>
          <div class="mb-3">
            <label for="staffRole" class="form-label">Role</label>
            <select class="form-select" id="staffRole" required>
              <option value="staff">Staff</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="staffPhone" class="form-label">Phone Number</label>
            <input type="tel" class="form-control" id="staffPhone" placeholder="12345678" required>
          </div>
          <div class="mb-3">
            <label for="staffPassword" class="form-label">Password</label>
            <input type="password" class="form-control" id="staffPassword" required>
          </div>
          <div class="mb-3">
            <label for="staffConfirmPassword" class="form-label">Confirm Password</label>
            <input type="password" class="form-control" id="staffConfirmPassword" required>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-warning" onclick="addStaffMember()">Add Staff Member</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let editingStaffRow;
  const currentUserId = {{currentUser.user_id}};
  const isAdmin = {{isAdmin}};

  function editStaff(btn) {
    if (!isAdmin) {
      alert('Only admins can edit staff members');
      return;
    }
    
    editingStaffRow = btn.closest('tr');
    const staffId = editingStaffRow.cells[0].textContent;
    
    document.getElementById('editStaffId').value = editingStaffRow.cells[0].textContent;
    document.getElementById('editStaffEmail').value = editingStaffRow.cells[1].textContent;
    document.getElementById('editStaffPhone').value = editingStaffRow.cells[2].textContent;
    
    // Set role based on badge text
    const roleBadge = editingStaffRow.querySelector('td:nth-child(4) span');
    const role = roleBadge.textContent.toLowerCase();
    document.getElementById('editStaffRole').value = role;
    
    // Set status based on the badge
    const statusBadge = editingStaffRow.querySelector('td:nth-child(5) span');
    const isSuspended = statusBadge.classList.contains('status-banned');
    document.getElementById('editStaffStatus').value = isSuspended ? 'suspended' : 'active';
    
    new bootstrap.Modal(document.getElementById('editStaffModal')).show();
  }

  function saveStaffChanges() {
    if (!isAdmin) {
      alert('Only admins can edit staff members');
      return;
    }
    
    const staffId = document.getElementById('editStaffId').value;
    const email = document.getElementById('editStaffEmail').value;
    const phone = document.getElementById('editStaffPhone').value;
    const role = document.getElementById('editStaffRole').value;
    const status = document.getElementById('editStaffStatus').value;
    
    // Client-side validation
    if (!email || !phone || !role || !status) {
      alert('Please fill in all required fields.');
      return;
    }
    
    if (!/^\d{8}$/.test(phone)) {
      alert('Phone number must be exactly 8 digits long.');
      return;
    }
    
    // Show loading state
    const saveBtn = document.querySelector('#editStaffModal .btn-primary');
    const originalText = saveBtn.textContent;
    saveBtn.textContent = 'Saving...';
    saveBtn.disabled = true;
    
    fetch(`/staff/${staffId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, phone, role, status })
    })
    .then(res => {
      if (!res.ok) {
        return res.json().then(data => {
          throw new Error(data.error || 'Failed to update staff member');
        });
      }
      return res.json();
    })
    .then(data => {
      if (data.success) {
        // Update the table row
        editingStaffRow.cells[1].textContent = email;
        editingStaffRow.cells[2].textContent = phone;
        
        // Update role badge
        const roleBadge = editingStaffRow.querySelector('td:nth-child(4) span');
        roleBadge.textContent = role.charAt(0).toUpperCase() + role.slice(1);
        roleBadge.className = `badge role-${role}`;
        
        // Update status badge
        const statusCell = editingStaffRow.querySelector('td:nth-child(5) span');
        if (status === 'suspended') {
          statusCell.classList.remove('status-active');
          statusCell.classList.add('status-banned');
          statusCell.textContent = 'Suspended';
        } else {
          statusCell.classList.remove('status-banned');
          statusCell.classList.add('status-active');
          statusCell.textContent = 'Active';
        }
        
        // Update suspend/unsuspend button
        const actionBtn = editingStaffRow.querySelector('.action-btn');
        if (status === 'suspended') {
          actionBtn.classList.remove('btn-warning');
          actionBtn.classList.add('btn-success');
          actionBtn.textContent = 'Unsuspend';
        } else {
          actionBtn.classList.remove('btn-success');
          actionBtn.classList.add('btn-warning');
          actionBtn.textContent = 'Suspend';
        }
        
        bootstrap.Modal.getInstance(document.getElementById('editStaffModal')).hide();
        alert('Staff member updated successfully!');
      } else {
        alert(data.error || 'Failed to update staff member.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert(error.message || 'Failed to update staff member. Please try again.');
    })
    .finally(() => {
      // Reset button state
      saveBtn.textContent = originalText;
      saveBtn.disabled = false;
    });
  }

  function toggleStaffStatus(btn) {
    if (!isAdmin) {
      alert('Only admins can change staff status');
      return;
    }
    
    const row = btn.closest('tr');
    const staffId = row.cells[0].textContent;
    
    const statusCell = row.querySelector('td:nth-child(5) span');
    const isSuspended = statusCell.classList.contains('status-banned');
    
    if (!confirm(`Are you sure you want to ${isSuspended ? 'unsuspend' : 'suspend'} this staff member?`)) return;
    
    // Show loading state
    const originalText = btn.textContent;
    btn.textContent = 'Loading...';
    btn.disabled = true;
    
    fetch(`/staff/${staffId}/status`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: isSuspended ? 'active' : 'suspended' })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        if (isSuspended) {
          statusCell.classList.remove('status-banned');
          statusCell.classList.add('status-active');
          statusCell.textContent = 'Active';
          btn.classList.remove('btn-success');
          btn.classList.add('btn-warning');
          btn.textContent = 'Suspend';
        } else {
          statusCell.classList.remove('status-active');
          statusCell.classList.add('status-banned');
          statusCell.textContent = 'Suspended';
          btn.classList.remove('btn-warning');
          btn.classList.add('btn-success');
          btn.textContent = 'Unsuspend';
        }
        alert(`Staff member ${isSuspended ? 'activated' : 'suspended'} successfully!`);
        // Re-enable button after successful update
        btn.disabled = false;
      } else {
        alert(data.error || 'Failed to change status.');
        // Reset button state on error
        btn.textContent = originalText;
        btn.disabled = false;
      }
    })
    .catch(() => {
      alert('Failed to change status.');
      // Reset button state on error
      btn.textContent = originalText;
      btn.disabled = false;
    });
  }

  function deleteStaff(btn) {
    if (!isAdmin) {
      alert('Only admins can delete staff members');
      return;
    }
    
    const row = btn.closest('tr');
    const staffId = row.cells[0].textContent;
    const staffEmail = row.cells[1].textContent;
    
    if (!confirm(`Are you sure you want to delete staff member with email "${staffEmail}"? This action cannot be undone.`)) return;
    
    // Show loading state
    const originalText = btn.textContent;
    btn.textContent = 'Deleting...';
    btn.disabled = true;
    
    fetch(`/staff/${staffId}`, {
      method: 'DELETE'
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        row.remove();
        alert('Staff member deleted successfully!');
      } else {
        alert(data.error || 'Failed to delete staff member.');
      }
    })
    .catch(() => alert('Failed to delete staff member.'))
    .finally(() => {
      // Reset button state
      btn.textContent = originalText;
      btn.disabled = false;
    });
  }

  function addStaffMember() {
    if (!isAdmin) {
      alert('Only admins can add staff members');
      return;
    }
    
    const email = document.getElementById('staffEmail').value;
    const role = document.getElementById('staffRole').value;
    const phone = document.getElementById('staffPhone').value;
    const password = document.getElementById('staffPassword').value;
    const confirmPassword = document.getElementById('staffConfirmPassword').value;
    
    // Client-side validation
    if (!email || !phone || !password || !confirmPassword) {
      alert('Please fill in all required fields.');
      return;
    }
    
    if (password !== confirmPassword) {
      alert('Passwords do not match');
      return;
    }
    
    if (password.length < 6) {
      alert('Password must be at least 6 characters long');
      return;
    }
    
    if (!/^\d{8}$/.test(phone)) {
      alert('Phone number must be exactly 8 digits long.');
      return;
    }
    
    // Show loading state
    const addBtn = document.querySelector('#addStaffModal .btn-warning');
    const originalText = addBtn.textContent;
    addBtn.textContent = 'Adding...';
    addBtn.disabled = true;
    
    // Make API call to create staff member
    fetch('/staff', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: email,
        role: role,
        phone: phone,
        password: password
      })
    })
    .then(res => {
      if (!res.ok) {
        return res.json().then(data => {
          throw new Error(data.error || 'Failed to create staff member');
        });
      }
      return res.json();
    })
    .then(data => {
      if (data.success) {
        alert('Staff member created successfully!');
        
        // Close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('addStaffModal'));
        modal.hide();
        
        // Reset the form
        document.getElementById('addStaffForm').reset();
        
        // Force reload the page to show the new staff member
        window.location.reload(true);
      } else {
        alert(data.error || 'Failed to create staff member.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert(error.message || 'Failed to create staff member. Please try again.');
    })
    .finally(() => {
      // Reset button state
      addBtn.textContent = originalText;
      addBtn.disabled = false;
    });
  }

  // Search and filter functionality
  const staffSearch = document.getElementById('staffSearch');
  const statusFilter = document.getElementById('statusFilter');
  const roleFilter = document.getElementById('roleFilter');

  function filterStaffTable() {
    const filter = staffSearch.value.toLowerCase();
    const status = statusFilter.value;
    const role = roleFilter.value;
    const rows = document.querySelectorAll('#staffTable tbody tr');
    
    rows.forEach(row => {
      const staffId = row.cells[0].textContent.toLowerCase();
      const email = row.cells[1].textContent.toLowerCase();
      const phone = row.cells[2].textContent.toLowerCase();
      const roleBadge = row.querySelector('td:nth-child(4) span');
      const statusBadge = row.querySelector('td:nth-child(5) span');
      
      const isActive = statusBadge.classList.contains('status-active');
      const isSuspended = statusBadge.classList.contains('status-banned');
      const isAdmin = roleBadge.classList.contains('role-admin');
      const isStaff = roleBadge.classList.contains('role-staff');
      
      let statusMatch =
        status === 'all' ||
        (status === 'active' && isActive) ||
        (status === 'suspended' && isSuspended);
      
      let roleMatch =
        role === 'all' ||
        (role === 'admin' && isAdmin) ||
        (role === 'staff' && isStaff);
      
      let textMatch =
        staffId.includes(filter) || email.includes(filter) || phone.includes(filter);
      
      row.style.display = statusMatch && roleMatch && textMatch ? '' : 'none';
    });
  }

  staffSearch.addEventListener('input', filterStaffTable);
  statusFilter.addEventListener('change', filterStaffTable);
  roleFilter.addEventListener('change', filterStaffTable);
</script>
