<h1>Staff: Manage Users</h1>
<div style="height: 32px;"></div>
<div class="header-bar">
  <h3 class="mb-0">User Management</h3>
  <div style="display: flex; gap: 8px; align-items: center;">
    <input type="text" class="form-control" id="userSearch" style="width: 250px;" placeholder="Search users...">
    <select id="statusFilter" class="form-control" style="width: 140px;">
      <option value="all">All Statuses</option>
      <option value="active">Active</option>
      <option value="suspended">Suspended</option>
    </select>
  </div>
</div>
<div class="table-container">
  <table class="table table-hover user-mgmt-table" id="userTable">
    <thead>
      <tr>
        <th>User ID</th>
        <th>Username</th>
        <th>Email</th>
        <th>Phone</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      {{#each users}}
        <tr>
          <td>{{this.user_id}}</td>
          <td>{{this.username}}</td>
          <td>{{this.email}}</td>
          <td>{{this.phone}}</td>
          <td>
            {{#if this.isBanned}}
              <span class="badge status-banned">Suspended</span>
            {{else}}
              <span class="badge status-active">Active</span>
            {{/if}}
          </td>
          <td>
            <button class="btn btn-sm btn-info" onclick="goToUserProfile(this)">Select</button>
            {{#if this.isBanned}}
              <button class="btn btn-sm btn-success action-btn" onclick="toggleSuspend(this)">Unsuspend</button>
            {{else}}
              <button class="btn btn-sm btn-warning action-btn" onclick="toggleSuspend(this)">Suspend</button>
            {{/if}}
            <button class="btn btn-sm btn-secondary" onclick="editUser(this)">Edit</button>
            <button class="btn btn-sm btn-danger" onclick="deleteUser(this)">Delete</button>
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label for="editUserId" class="form-label">User ID</label>
            <input type="text" class="form-control" id="editUserId" readonly>
          </div>
          <div class="mb-3">
            <label for="editUsername" class="form-label">Username</label>
            <input type="text" class="form-control" id="editUsername">
          </div>
          <div class="mb-3">
            <label for="editEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="editEmail">
          </div>
          <div class="mb-3">
            <label for="editPhone" class="form-label">Phone</label>
            <input type="text" class="form-control" id="editPhone">
          </div>
          <div class="mb-3">
            <label for="editStatus" class="form-label">Status</label>
            <select class="form-control" id="editStatus">
              <option value="active">Active</option>
              <option value="suspended">Suspended</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveUserChanges()">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let editingRow;

  function editUser(btn) {
    editingRow = btn.closest('tr');
    document.getElementById('editUserId').value = editingRow.cells[0].textContent;
    document.getElementById('editUsername').value = editingRow.cells[1].textContent;
    document.getElementById('editEmail').value = editingRow.cells[2].textContent;
    document.getElementById('editPhone').value = editingRow.cells[3].textContent;
    
    // Set status based on the badge
    const statusBadge = editingRow.querySelector('td:nth-child(5) span');
    const isBanned = statusBadge.classList.contains('status-banned');
    document.getElementById('editStatus').value = isBanned ? 'suspended' : 'active';
    
    new bootstrap.Modal(document.getElementById('editUserModal')).show();
  }

  function saveUserChanges() {
    const userId = document.getElementById('editUserId').value;
    const username = document.getElementById('editUsername').value;
    const email = document.getElementById('editEmail').value;
    const phone = document.getElementById('editPhone').value;
    const status = document.getElementById('editStatus').value;
    
    // Validation
    if (!username || !email || !phone || !status) {
      alert('All fields are required.');
      return;
    }
    
    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      alert('Please enter a valid email address.');
      return;
    }
    
    // Phone validation (8 digits)
    const phoneRegex = /^\d{8}$/;
    if (!phoneRegex.test(phone)) {
      alert('Phone number must be exactly 8 digits.');
      return;
    }
    
    // Show loading state
    const saveBtn = document.querySelector('#editUserModal .btn-primary');
    const originalText = saveBtn.textContent;
    saveBtn.textContent = 'Saving...';
    saveBtn.disabled = true;
    
    fetch(`/users/${userId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, email, phone, status })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        editingRow.cells[1].textContent = username;
        editingRow.cells[2].textContent = email;
        editingRow.cells[3].textContent = phone;
        
        // Update status badge
        const statusCell = editingRow.querySelector('td:nth-child(5) span');
        if (status === 'suspended') {
          statusCell.classList.remove('status-active');
          statusCell.classList.add('status-banned');
          statusCell.textContent = 'Suspended';
        } else {
          statusCell.classList.remove('status-banned');
          statusCell.classList.add('status-active');
          statusCell.textContent = 'Active';
        }
        
        // Update suspend/unsuspend button
        const actionBtn = editingRow.querySelector('.action-btn');
        if (status === 'suspended') {
          actionBtn.classList.remove('btn-warning');
          actionBtn.classList.add('btn-success');
          actionBtn.textContent = 'Unsuspend';
        } else {
          actionBtn.classList.remove('btn-success');
          actionBtn.classList.add('btn-warning');
          actionBtn.textContent = 'Suspend';
        }
        
        bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
        alert('User updated successfully!');
      } else {
        alert(data.error || 'Failed to update user.');
      }
    })
    .catch(() => alert('Failed to update user.'))
    .finally(() => {
      // Reset button state
      saveBtn.textContent = originalText;
      saveBtn.disabled = false;
    });
  }

  function toggleSuspend(btn) {
    const row = btn.closest('tr');
    const userId = row.cells[0].textContent;
    const statusCell = row.querySelector('td:nth-child(5) span');
    const isSuspended = statusCell.classList.contains('status-banned');
    
    if (!confirm(`Are you sure you want to ${isSuspended ? 'unsuspend' : 'suspend'} this user?`)) return;
    
    // Show loading state
    const originalText = btn.textContent;
    btn.textContent = 'Loading...';
    btn.disabled = true;
    
    fetch(`/users/${userId}/ban`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ banned: !isSuspended })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        if (isSuspended) {
          statusCell.classList.remove('status-banned');
          statusCell.classList.add('status-active');
          statusCell.textContent = 'Active';
          btn.classList.remove('btn-success');
          btn.classList.add('btn-warning');
          btn.textContent = 'Suspend';
        } else {
          statusCell.classList.remove('status-active');
          statusCell.classList.add('status-banned');
          statusCell.textContent = 'Suspended';
          btn.classList.remove('btn-warning');
          btn.classList.add('btn-success');
          btn.textContent = 'Unsuspend';
        }
        alert(`User ${isSuspended ? 'activated' : 'suspended'} successfully!`);
        // Re-enable button after successful update
        btn.disabled = false;
      } else {
        alert(data.error || 'Failed to change status.');
        // Reset button state on error
        btn.textContent = originalText;
        btn.disabled = false;
      }
    })
    .catch(() => {
      alert('Failed to change status.');
      // Reset button state on error
      btn.textContent = originalText;
      btn.disabled = false;
    });
  }

  function deleteUser(btn) {
    const row = btn.closest('tr');
    const userId = row.cells[0].textContent;
    const userEmail = row.cells[2].textContent;
    
    if (!confirm(`Are you sure you want to delete user with email "${userEmail}"? This action cannot be undone.`)) return;
    
    // Show loading state
    const originalText = btn.textContent;
    btn.textContent = 'Deleting...';
    btn.disabled = true;
    
    fetch(`/users/${userId}`, {
      method: 'DELETE'
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        row.remove();
        alert('User deleted successfully!');
      } else {
        alert(data.error || 'Failed to delete user.');
      }
    })
    .catch(() => alert('Failed to delete user.'))
    .finally(() => {
      // Reset button state
      btn.textContent = originalText;
      btn.disabled = false;
    });
  }

  // Search bar and status filter functionality
  const userSearch = document.getElementById('userSearch');
  const statusFilter = document.getElementById('statusFilter');

  function filterTable() {
    const filter = userSearch.value.toLowerCase();
    const status = statusFilter.value;
    const rows = document.querySelectorAll('#userTable tbody tr');
    rows.forEach(row => {
      const userId = row.cells[0].textContent.toLowerCase();
      const username = row.cells[1].textContent.toLowerCase();
      const email = row.cells[2].textContent.toLowerCase();
      const badge = row.querySelector('td:nth-child(5) span');
      const isActive = badge.classList.contains('status-active');
      const isSuspended = badge.classList.contains('status-banned');
      let statusMatch =
        status === 'all' ||
        (status === 'active' && isActive) ||
        (status === 'suspended' && isSuspended);
      let textMatch =
        userId.includes(filter) || username.includes(filter) || email.includes(filter);
      row.style.display = statusMatch && textMatch ? '' : 'none';
    });
  }

  function goToUserProfile(btn) {
  const row = btn.closest('tr');
  const userId = row.cells[0].textContent.trim();

  if (userId) {
    window.location.href = `/user/id/${userId}`;
  } else {
    alert('User ID not found.');
  }
}


  userSearch.addEventListener('input', filterTable);
  statusFilter.addEventListener('change', filterTable);
</script> 